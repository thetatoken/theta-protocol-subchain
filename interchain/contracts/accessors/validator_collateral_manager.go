// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ValidatorCollateralManagerMetaData contains all meta data concerning the ValidatorCollateralManager contract.
var ValidatorCollateralManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wTheta_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalPendingPeriodInBlocks_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualSlashedActiveCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"SlashActiveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmoun\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"ValidatorCollateralDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"ValidatorCollateralReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"ValidatorCollateralWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"guarantors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidatorCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorCandidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wTheta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPendingPeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalQueues\",\"outputs\":[{\"internalType\":\"contractWithdrawalQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guarantor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"}],\"name\":\"slashCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualSlashedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinValidatorCollateralAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorCandidate\",\"type\":\"address\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalQueue\",\"outputs\":[{\"internalType\":\"contractWithdrawalQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"hasValidatorCollaterals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// ValidatorCollateralManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorCollateralManagerMetaData.ABI instead.
var ValidatorCollateralManagerABI = ValidatorCollateralManagerMetaData.ABI

// ValidatorCollateralManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorCollateralManagerMetaData.Bin instead.
var ValidatorCollateralManagerBin = ValidatorCollateralManagerMetaData.Bin

// DeployValidatorCollateralManager deploys a new Ethereum contract, binding an instance of ValidatorCollateralManager to it.
func DeployValidatorCollateralManager(auth *bind.TransactOpts, backend bind.ContractBackend, owner_ common.Address, wTheta_ common.Address, withdrawalPendingPeriodInBlocks_ *big.Int) (common.Address, *types.Transaction, *ValidatorCollateralManager, error) {
	parsed, err := ValidatorCollateralManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorCollateralManagerBin), backend, owner_, wTheta_, withdrawalPendingPeriodInBlocks_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorCollateralManager{ValidatorCollateralManagerCaller: ValidatorCollateralManagerCaller{contract: contract}, ValidatorCollateralManagerTransactor: ValidatorCollateralManagerTransactor{contract: contract}, ValidatorCollateralManagerFilterer: ValidatorCollateralManagerFilterer{contract: contract}}, nil
}

// ValidatorCollateralManager is an auto generated Go binding around an Ethereum contract.
type ValidatorCollateralManager struct {
	ValidatorCollateralManagerCaller     // Read-only binding to the contract
	ValidatorCollateralManagerTransactor // Write-only binding to the contract
	ValidatorCollateralManagerFilterer   // Log filterer for contract events
}

// ValidatorCollateralManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorCollateralManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorCollateralManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorCollateralManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorCollateralManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorCollateralManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorCollateralManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorCollateralManagerSession struct {
	Contract     *ValidatorCollateralManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ValidatorCollateralManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorCollateralManagerCallerSession struct {
	Contract *ValidatorCollateralManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// ValidatorCollateralManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorCollateralManagerTransactorSession struct {
	Contract     *ValidatorCollateralManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// ValidatorCollateralManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorCollateralManagerRaw struct {
	Contract *ValidatorCollateralManager // Generic contract binding to access the raw methods on
}

// ValidatorCollateralManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorCollateralManagerCallerRaw struct {
	Contract *ValidatorCollateralManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorCollateralManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorCollateralManagerTransactorRaw struct {
	Contract *ValidatorCollateralManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorCollateralManager creates a new instance of ValidatorCollateralManager, bound to a specific deployed contract.
func NewValidatorCollateralManager(address common.Address, backend bind.ContractBackend) (*ValidatorCollateralManager, error) {
	contract, err := bindValidatorCollateralManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManager{ValidatorCollateralManagerCaller: ValidatorCollateralManagerCaller{contract: contract}, ValidatorCollateralManagerTransactor: ValidatorCollateralManagerTransactor{contract: contract}, ValidatorCollateralManagerFilterer: ValidatorCollateralManagerFilterer{contract: contract}}, nil
}

// NewValidatorCollateralManagerCaller creates a new read-only instance of ValidatorCollateralManager, bound to a specific deployed contract.
func NewValidatorCollateralManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorCollateralManagerCaller, error) {
	contract, err := bindValidatorCollateralManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerCaller{contract: contract}, nil
}

// NewValidatorCollateralManagerTransactor creates a new write-only instance of ValidatorCollateralManager, bound to a specific deployed contract.
func NewValidatorCollateralManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorCollateralManagerTransactor, error) {
	contract, err := bindValidatorCollateralManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerTransactor{contract: contract}, nil
}

// NewValidatorCollateralManagerFilterer creates a new log filterer instance of ValidatorCollateralManager, bound to a specific deployed contract.
func NewValidatorCollateralManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorCollateralManagerFilterer, error) {
	contract, err := bindValidatorCollateralManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerFilterer{contract: contract}, nil
}

// bindValidatorCollateralManager binds a generic wrapper to an already deployed contract.
func bindValidatorCollateralManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorCollateralManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorCollateralManager *ValidatorCollateralManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorCollateralManager.Contract.ValidatorCollateralManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorCollateralManager *ValidatorCollateralManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.ValidatorCollateralManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorCollateralManager *ValidatorCollateralManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.ValidatorCollateralManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorCollateralManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.contract.Transact(opts, method, params...)
}

// Collaterals is a free data retrieval call binding the contract method 0xe01ee412.
//
// Solidity: function collaterals(uint256 , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) Collaterals(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "collaterals", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Collaterals is a free data retrieval call binding the contract method 0xe01ee412.
//
// Solidity: function collaterals(uint256 , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) Collaterals(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.Collaterals(&_ValidatorCollateralManager.CallOpts, arg0, arg1)
}

// Collaterals is a free data retrieval call binding the contract method 0xe01ee412.
//
// Solidity: function collaterals(uint256 , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) Collaterals(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.Collaterals(&_ValidatorCollateralManager.CallOpts, arg0, arg1)
}

// GetCollateralAmount is a free data retrieval call binding the contract method 0xcd98536b.
//
// Solidity: function getCollateralAmount(uint256 subchainID, address validatorCandidate) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) GetCollateralAmount(opts *bind.CallOpts, subchainID *big.Int, validatorCandidate common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "getCollateralAmount", subchainID, validatorCandidate)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCollateralAmount is a free data retrieval call binding the contract method 0xcd98536b.
//
// Solidity: function getCollateralAmount(uint256 subchainID, address validatorCandidate) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) GetCollateralAmount(subchainID *big.Int, validatorCandidate common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.GetCollateralAmount(&_ValidatorCollateralManager.CallOpts, subchainID, validatorCandidate)
}

// GetCollateralAmount is a free data retrieval call binding the contract method 0xcd98536b.
//
// Solidity: function getCollateralAmount(uint256 subchainID, address validatorCandidate) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) GetCollateralAmount(subchainID *big.Int, validatorCandidate common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.GetCollateralAmount(&_ValidatorCollateralManager.CallOpts, subchainID, validatorCandidate)
}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) GetWithdrawalQueue(opts *bind.CallOpts, subchainID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "getWithdrawalQueue", subchainID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) GetWithdrawalQueue(subchainID *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.GetWithdrawalQueue(&_ValidatorCollateralManager.CallOpts, subchainID)
}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) GetWithdrawalQueue(subchainID *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.GetWithdrawalQueue(&_ValidatorCollateralManager.CallOpts, subchainID)
}

// Guarantors is a free data retrieval call binding the contract method 0xc7bbe4dc.
//
// Solidity: function guarantors(uint256 , address , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) Guarantors(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "guarantors", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Guarantors is a free data retrieval call binding the contract method 0xc7bbe4dc.
//
// Solidity: function guarantors(uint256 , address , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) Guarantors(arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.Guarantors(&_ValidatorCollateralManager.CallOpts, arg0, arg1, arg2)
}

// Guarantors is a free data retrieval call binding the contract method 0xc7bbe4dc.
//
// Solidity: function guarantors(uint256 , address , address ) view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) Guarantors(arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.Guarantors(&_ValidatorCollateralManager.CallOpts, arg0, arg1, arg2)
}

// HasValidatorCollaterals is a free data retrieval call binding the contract method 0x4f1e404f.
//
// Solidity: function hasValidatorCollaterals(uint256 subchainID) view returns(bool)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) HasValidatorCollaterals(opts *bind.CallOpts, subchainID *big.Int) (bool, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "hasValidatorCollaterals", subchainID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasValidatorCollaterals is a free data retrieval call binding the contract method 0x4f1e404f.
//
// Solidity: function hasValidatorCollaterals(uint256 subchainID) view returns(bool)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) HasValidatorCollaterals(subchainID *big.Int) (bool, error) {
	return _ValidatorCollateralManager.Contract.HasValidatorCollaterals(&_ValidatorCollateralManager.CallOpts, subchainID)
}

// HasValidatorCollaterals is a free data retrieval call binding the contract method 0x4f1e404f.
//
// Solidity: function hasValidatorCollaterals(uint256 subchainID) view returns(bool)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) HasValidatorCollaterals(subchainID *big.Int) (bool, error) {
	return _ValidatorCollateralManager.Contract.HasValidatorCollaterals(&_ValidatorCollateralManager.CallOpts, subchainID)
}

// MinValidatorCollateralAmount is a free data retrieval call binding the contract method 0x35b444f0.
//
// Solidity: function minValidatorCollateralAmount() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) MinValidatorCollateralAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "minValidatorCollateralAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinValidatorCollateralAmount is a free data retrieval call binding the contract method 0x35b444f0.
//
// Solidity: function minValidatorCollateralAmount() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) MinValidatorCollateralAmount() (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.MinValidatorCollateralAmount(&_ValidatorCollateralManager.CallOpts)
}

// MinValidatorCollateralAmount is a free data retrieval call binding the contract method 0x35b444f0.
//
// Solidity: function minValidatorCollateralAmount() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) MinValidatorCollateralAmount() (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.MinValidatorCollateralAmount(&_ValidatorCollateralManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) Owner() (common.Address, error) {
	return _ValidatorCollateralManager.Contract.Owner(&_ValidatorCollateralManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) Owner() (common.Address, error) {
	return _ValidatorCollateralManager.Contract.Owner(&_ValidatorCollateralManager.CallOpts)
}

// ValidatorCandidates is a free data retrieval call binding the contract method 0xf95f1521.
//
// Solidity: function validatorCandidates(uint256 , uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) ValidatorCandidates(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "validatorCandidates", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorCandidates is a free data retrieval call binding the contract method 0xf95f1521.
//
// Solidity: function validatorCandidates(uint256 , uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) ValidatorCandidates(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.ValidatorCandidates(&_ValidatorCollateralManager.CallOpts, arg0, arg1)
}

// ValidatorCandidates is a free data retrieval call binding the contract method 0xf95f1521.
//
// Solidity: function validatorCandidates(uint256 , uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) ValidatorCandidates(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.ValidatorCandidates(&_ValidatorCollateralManager.CallOpts, arg0, arg1)
}

// WTheta is a free data retrieval call binding the contract method 0xfc80ade3.
//
// Solidity: function wTheta() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) WTheta(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "wTheta")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WTheta is a free data retrieval call binding the contract method 0xfc80ade3.
//
// Solidity: function wTheta() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) WTheta() (common.Address, error) {
	return _ValidatorCollateralManager.Contract.WTheta(&_ValidatorCollateralManager.CallOpts)
}

// WTheta is a free data retrieval call binding the contract method 0xfc80ade3.
//
// Solidity: function wTheta() view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) WTheta() (common.Address, error) {
	return _ValidatorCollateralManager.Contract.WTheta(&_ValidatorCollateralManager.CallOpts)
}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) WithdrawalPendingPeriodInBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "withdrawalPendingPeriodInBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) WithdrawalPendingPeriodInBlocks() (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.WithdrawalPendingPeriodInBlocks(&_ValidatorCollateralManager.CallOpts)
}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) WithdrawalPendingPeriodInBlocks() (*big.Int, error) {
	return _ValidatorCollateralManager.Contract.WithdrawalPendingPeriodInBlocks(&_ValidatorCollateralManager.CallOpts)
}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCaller) WithdrawalQueues(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorCollateralManager.contract.Call(opts, &out, "withdrawalQueues", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) WithdrawalQueues(arg0 *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.WithdrawalQueues(&_ValidatorCollateralManager.CallOpts, arg0)
}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorCollateralManager *ValidatorCollateralManagerCallerSession) WithdrawalQueues(arg0 *big.Int) (common.Address, error) {
	return _ValidatorCollateralManager.Contract.WithdrawalQueues(&_ValidatorCollateralManager.CallOpts, arg0)
}

// ClaimCollateral is a paid mutator transaction binding the contract method 0xa5aca380.
//
// Solidity: function claimCollateral(uint256 subchainID, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) ClaimCollateral(opts *bind.TransactOpts, subchainID *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "claimCollateral", subchainID, guarantor)
}

// ClaimCollateral is a paid mutator transaction binding the contract method 0xa5aca380.
//
// Solidity: function claimCollateral(uint256 subchainID, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) ClaimCollateral(subchainID *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.ClaimCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, guarantor)
}

// ClaimCollateral is a paid mutator transaction binding the contract method 0xa5aca380.
//
// Solidity: function claimCollateral(uint256 subchainID, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) ClaimCollateral(subchainID *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.ClaimCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, guarantor)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0x117a05d5.
//
// Solidity: function depositCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) DepositCollateral(opts *bind.TransactOpts, subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "depositCollateral", subchainID, validatorCandidate, collateralAmount, guarantor)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0x117a05d5.
//
// Solidity: function depositCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) DepositCollateral(subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.DepositCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, collateralAmount, guarantor)
}

// DepositCollateral is a paid mutator transaction binding the contract method 0x117a05d5.
//
// Solidity: function depositCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) DepositCollateral(subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.DepositCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, collateralAmount, guarantor)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x5251e81c.
//
// Solidity: function slashCollateral(uint256 subchainID, address validatorCandidate, address guarantor, uint256 slashAmount) returns(uint256 actualSlashedAmount)
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) SlashCollateral(opts *bind.TransactOpts, subchainID *big.Int, validatorCandidate common.Address, guarantor common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "slashCollateral", subchainID, validatorCandidate, guarantor, slashAmount)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x5251e81c.
//
// Solidity: function slashCollateral(uint256 subchainID, address validatorCandidate, address guarantor, uint256 slashAmount) returns(uint256 actualSlashedAmount)
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) SlashCollateral(subchainID *big.Int, validatorCandidate common.Address, guarantor common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.SlashCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, guarantor, slashAmount)
}

// SlashCollateral is a paid mutator transaction binding the contract method 0x5251e81c.
//
// Solidity: function slashCollateral(uint256 subchainID, address validatorCandidate, address guarantor, uint256 slashAmount) returns(uint256 actualSlashedAmount)
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) SlashCollateral(subchainID *big.Int, validatorCandidate common.Address, guarantor common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.SlashCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, guarantor, slashAmount)
}

// UpdateMinValidatorCollateralAmount is a paid mutator transaction binding the contract method 0x1ead7deb.
//
// Solidity: function updateMinValidatorCollateralAmount(uint256 amount) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) UpdateMinValidatorCollateralAmount(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "updateMinValidatorCollateralAmount", amount)
}

// UpdateMinValidatorCollateralAmount is a paid mutator transaction binding the contract method 0x1ead7deb.
//
// Solidity: function updateMinValidatorCollateralAmount(uint256 amount) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) UpdateMinValidatorCollateralAmount(amount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.UpdateMinValidatorCollateralAmount(&_ValidatorCollateralManager.TransactOpts, amount)
}

// UpdateMinValidatorCollateralAmount is a paid mutator transaction binding the contract method 0x1ead7deb.
//
// Solidity: function updateMinValidatorCollateralAmount(uint256 amount) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) UpdateMinValidatorCollateralAmount(amount *big.Int) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.UpdateMinValidatorCollateralAmount(&_ValidatorCollateralManager.TransactOpts, amount)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) UpdateOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "updateOwner", newOwner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) UpdateOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.UpdateOwner(&_ValidatorCollateralManager.TransactOpts, newOwner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) UpdateOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.UpdateOwner(&_ValidatorCollateralManager.TransactOpts, newOwner)
}

// WithdrawCollateral is a paid mutator transaction binding the contract method 0x9f36b816.
//
// Solidity: function withdrawCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactor) WithdrawCollateral(opts *bind.TransactOpts, subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.contract.Transact(opts, "withdrawCollateral", subchainID, validatorCandidate, collateralAmount, guarantor)
}

// WithdrawCollateral is a paid mutator transaction binding the contract method 0x9f36b816.
//
// Solidity: function withdrawCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerSession) WithdrawCollateral(subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.WithdrawCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, collateralAmount, guarantor)
}

// WithdrawCollateral is a paid mutator transaction binding the contract method 0x9f36b816.
//
// Solidity: function withdrawCollateral(uint256 subchainID, address validatorCandidate, uint256 collateralAmount, address guarantor) returns()
func (_ValidatorCollateralManager *ValidatorCollateralManagerTransactorSession) WithdrawCollateral(subchainID *big.Int, validatorCandidate common.Address, collateralAmount *big.Int, guarantor common.Address) (*types.Transaction, error) {
	return _ValidatorCollateralManager.Contract.WithdrawCollateral(&_ValidatorCollateralManager.TransactOpts, subchainID, validatorCandidate, collateralAmount, guarantor)
}

// ValidatorCollateralManagerSlashActiveCollateralIterator is returned from FilterSlashActiveCollateral and is used to iterate over the raw logs and unpacked data for SlashActiveCollateral events raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerSlashActiveCollateralIterator struct {
	Event *ValidatorCollateralManagerSlashActiveCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorCollateralManagerSlashActiveCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorCollateralManagerSlashActiveCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorCollateralManagerSlashActiveCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorCollateralManagerSlashActiveCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorCollateralManagerSlashActiveCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorCollateralManagerSlashActiveCollateral represents a SlashActiveCollateral event raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerSlashActiveCollateral struct {
	SubchainID                          *big.Int
	ActualSlashedActiveCollateralAmount *big.Int
	Guarantor                           common.Address
	Raw                                 types.Log // Blockchain specific contextual infos
}

// FilterSlashActiveCollateral is a free log retrieval operation binding the contract event 0x3f274b47575a0be275b10dad94a97d6b883fd9cb697f82c1911aef6ad9ad3a1b.
//
// Solidity: event SlashActiveCollateral(uint256 indexed subchainID, uint256 actualSlashedActiveCollateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) FilterSlashActiveCollateral(opts *bind.FilterOpts, subchainID []*big.Int, guarantor []common.Address) (*ValidatorCollateralManagerSlashActiveCollateralIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.FilterLogs(opts, "SlashActiveCollateral", subchainIDRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerSlashActiveCollateralIterator{contract: _ValidatorCollateralManager.contract, event: "SlashActiveCollateral", logs: logs, sub: sub}, nil
}

// WatchSlashActiveCollateral is a free log subscription operation binding the contract event 0x3f274b47575a0be275b10dad94a97d6b883fd9cb697f82c1911aef6ad9ad3a1b.
//
// Solidity: event SlashActiveCollateral(uint256 indexed subchainID, uint256 actualSlashedActiveCollateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) WatchSlashActiveCollateral(opts *bind.WatchOpts, sink chan<- *ValidatorCollateralManagerSlashActiveCollateral, subchainID []*big.Int, guarantor []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.WatchLogs(opts, "SlashActiveCollateral", subchainIDRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorCollateralManagerSlashActiveCollateral)
				if err := _ValidatorCollateralManager.contract.UnpackLog(event, "SlashActiveCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashActiveCollateral is a log parse operation binding the contract event 0x3f274b47575a0be275b10dad94a97d6b883fd9cb697f82c1911aef6ad9ad3a1b.
//
// Solidity: event SlashActiveCollateral(uint256 indexed subchainID, uint256 actualSlashedActiveCollateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) ParseSlashActiveCollateral(log types.Log) (*ValidatorCollateralManagerSlashActiveCollateral, error) {
	event := new(ValidatorCollateralManagerSlashActiveCollateral)
	if err := _ValidatorCollateralManager.contract.UnpackLog(event, "SlashActiveCollateral", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorCollateralManagerUpdateOwnerIterator is returned from FilterUpdateOwner and is used to iterate over the raw logs and unpacked data for UpdateOwner events raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerUpdateOwnerIterator struct {
	Event *ValidatorCollateralManagerUpdateOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorCollateralManagerUpdateOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorCollateralManagerUpdateOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorCollateralManagerUpdateOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorCollateralManagerUpdateOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorCollateralManagerUpdateOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorCollateralManagerUpdateOwner represents a UpdateOwner event raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerUpdateOwner struct {
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateOwner is a free log retrieval operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) FilterUpdateOwner(opts *bind.FilterOpts) (*ValidatorCollateralManagerUpdateOwnerIterator, error) {

	logs, sub, err := _ValidatorCollateralManager.contract.FilterLogs(opts, "UpdateOwner")
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerUpdateOwnerIterator{contract: _ValidatorCollateralManager.contract, event: "UpdateOwner", logs: logs, sub: sub}, nil
}

// WatchUpdateOwner is a free log subscription operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) WatchUpdateOwner(opts *bind.WatchOpts, sink chan<- *ValidatorCollateralManagerUpdateOwner) (event.Subscription, error) {

	logs, sub, err := _ValidatorCollateralManager.contract.WatchLogs(opts, "UpdateOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorCollateralManagerUpdateOwner)
				if err := _ValidatorCollateralManager.contract.UnpackLog(event, "UpdateOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateOwner is a log parse operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) ParseUpdateOwner(log types.Log) (*ValidatorCollateralManagerUpdateOwner, error) {
	event := new(ValidatorCollateralManagerUpdateOwner)
	if err := _ValidatorCollateralManager.contract.UnpackLog(event, "UpdateOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorCollateralManagerValidatorCollateralDepositIterator is returned from FilterValidatorCollateralDeposit and is used to iterate over the raw logs and unpacked data for ValidatorCollateralDeposit events raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralDepositIterator struct {
	Event *ValidatorCollateralManagerValidatorCollateralDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorCollateralManagerValidatorCollateralDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorCollateralManagerValidatorCollateralDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorCollateralManagerValidatorCollateralDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorCollateralManagerValidatorCollateralDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorCollateralManagerValidatorCollateralDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorCollateralManagerValidatorCollateralDeposit represents a ValidatorCollateralDeposit event raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralDeposit struct {
	SubchainID         *big.Int
	ValidatorCandidate common.Address
	CollateralAmoun    *big.Int
	Guarantor          common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterValidatorCollateralDeposit is a free log retrieval operation binding the contract event 0xdbce15b4f4d15cbcc2418b64edca721f02bc1014480d42eef77fa18e06564c4d.
//
// Solidity: event ValidatorCollateralDeposit(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmoun, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) FilterValidatorCollateralDeposit(opts *bind.FilterOpts, subchainID []*big.Int, validatorCandidate []common.Address, guarantor []common.Address) (*ValidatorCollateralManagerValidatorCollateralDepositIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}
	var validatorCandidateRule []interface{}
	for _, validatorCandidateItem := range validatorCandidate {
		validatorCandidateRule = append(validatorCandidateRule, validatorCandidateItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.FilterLogs(opts, "ValidatorCollateralDeposit", subchainIDRule, validatorCandidateRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerValidatorCollateralDepositIterator{contract: _ValidatorCollateralManager.contract, event: "ValidatorCollateralDeposit", logs: logs, sub: sub}, nil
}

// WatchValidatorCollateralDeposit is a free log subscription operation binding the contract event 0xdbce15b4f4d15cbcc2418b64edca721f02bc1014480d42eef77fa18e06564c4d.
//
// Solidity: event ValidatorCollateralDeposit(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmoun, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) WatchValidatorCollateralDeposit(opts *bind.WatchOpts, sink chan<- *ValidatorCollateralManagerValidatorCollateralDeposit, subchainID []*big.Int, validatorCandidate []common.Address, guarantor []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}
	var validatorCandidateRule []interface{}
	for _, validatorCandidateItem := range validatorCandidate {
		validatorCandidateRule = append(validatorCandidateRule, validatorCandidateItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.WatchLogs(opts, "ValidatorCollateralDeposit", subchainIDRule, validatorCandidateRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorCollateralManagerValidatorCollateralDeposit)
				if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCollateralDeposit is a log parse operation binding the contract event 0xdbce15b4f4d15cbcc2418b64edca721f02bc1014480d42eef77fa18e06564c4d.
//
// Solidity: event ValidatorCollateralDeposit(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmoun, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) ParseValidatorCollateralDeposit(log types.Log) (*ValidatorCollateralManagerValidatorCollateralDeposit, error) {
	event := new(ValidatorCollateralManagerValidatorCollateralDeposit)
	if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorCollateralManagerValidatorCollateralReturnIterator is returned from FilterValidatorCollateralReturn and is used to iterate over the raw logs and unpacked data for ValidatorCollateralReturn events raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralReturnIterator struct {
	Event *ValidatorCollateralManagerValidatorCollateralReturn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorCollateralManagerValidatorCollateralReturnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorCollateralManagerValidatorCollateralReturn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorCollateralManagerValidatorCollateralReturn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorCollateralManagerValidatorCollateralReturnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorCollateralManagerValidatorCollateralReturnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorCollateralManagerValidatorCollateralReturn represents a ValidatorCollateralReturn event raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralReturn struct {
	SubchainID       *big.Int
	CollateralAmount *big.Int
	Guarantor        common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterValidatorCollateralReturn is a free log retrieval operation binding the contract event 0x063f3c865515831cbc40ae0338f1e8af83465a52dc7b18cb7847587f9ea1cf4e.
//
// Solidity: event ValidatorCollateralReturn(uint256 indexed subchainID, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) FilterValidatorCollateralReturn(opts *bind.FilterOpts, subchainID []*big.Int, guarantor []common.Address) (*ValidatorCollateralManagerValidatorCollateralReturnIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.FilterLogs(opts, "ValidatorCollateralReturn", subchainIDRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerValidatorCollateralReturnIterator{contract: _ValidatorCollateralManager.contract, event: "ValidatorCollateralReturn", logs: logs, sub: sub}, nil
}

// WatchValidatorCollateralReturn is a free log subscription operation binding the contract event 0x063f3c865515831cbc40ae0338f1e8af83465a52dc7b18cb7847587f9ea1cf4e.
//
// Solidity: event ValidatorCollateralReturn(uint256 indexed subchainID, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) WatchValidatorCollateralReturn(opts *bind.WatchOpts, sink chan<- *ValidatorCollateralManagerValidatorCollateralReturn, subchainID []*big.Int, guarantor []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.WatchLogs(opts, "ValidatorCollateralReturn", subchainIDRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorCollateralManagerValidatorCollateralReturn)
				if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralReturn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCollateralReturn is a log parse operation binding the contract event 0x063f3c865515831cbc40ae0338f1e8af83465a52dc7b18cb7847587f9ea1cf4e.
//
// Solidity: event ValidatorCollateralReturn(uint256 indexed subchainID, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) ParseValidatorCollateralReturn(log types.Log) (*ValidatorCollateralManagerValidatorCollateralReturn, error) {
	event := new(ValidatorCollateralManagerValidatorCollateralReturn)
	if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralReturn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorCollateralManagerValidatorCollateralWithdrawalIterator is returned from FilterValidatorCollateralWithdrawal and is used to iterate over the raw logs and unpacked data for ValidatorCollateralWithdrawal events raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralWithdrawalIterator struct {
	Event *ValidatorCollateralManagerValidatorCollateralWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorCollateralManagerValidatorCollateralWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorCollateralManagerValidatorCollateralWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorCollateralManagerValidatorCollateralWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorCollateralManagerValidatorCollateralWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorCollateralManagerValidatorCollateralWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorCollateralManagerValidatorCollateralWithdrawal represents a ValidatorCollateralWithdrawal event raised by the ValidatorCollateralManager contract.
type ValidatorCollateralManagerValidatorCollateralWithdrawal struct {
	SubchainID         *big.Int
	ValidatorCandidate common.Address
	CollateralAmount   *big.Int
	Guarantor          common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterValidatorCollateralWithdrawal is a free log retrieval operation binding the contract event 0xf049ce4b58effbdd85cc8fbcf48a4e549f4a53a2a9b90bb49b95b97ddce36af1.
//
// Solidity: event ValidatorCollateralWithdrawal(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) FilterValidatorCollateralWithdrawal(opts *bind.FilterOpts, subchainID []*big.Int, validatorCandidate []common.Address, guarantor []common.Address) (*ValidatorCollateralManagerValidatorCollateralWithdrawalIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}
	var validatorCandidateRule []interface{}
	for _, validatorCandidateItem := range validatorCandidate {
		validatorCandidateRule = append(validatorCandidateRule, validatorCandidateItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.FilterLogs(opts, "ValidatorCollateralWithdrawal", subchainIDRule, validatorCandidateRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorCollateralManagerValidatorCollateralWithdrawalIterator{contract: _ValidatorCollateralManager.contract, event: "ValidatorCollateralWithdrawal", logs: logs, sub: sub}, nil
}

// WatchValidatorCollateralWithdrawal is a free log subscription operation binding the contract event 0xf049ce4b58effbdd85cc8fbcf48a4e549f4a53a2a9b90bb49b95b97ddce36af1.
//
// Solidity: event ValidatorCollateralWithdrawal(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) WatchValidatorCollateralWithdrawal(opts *bind.WatchOpts, sink chan<- *ValidatorCollateralManagerValidatorCollateralWithdrawal, subchainID []*big.Int, validatorCandidate []common.Address, guarantor []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}
	var validatorCandidateRule []interface{}
	for _, validatorCandidateItem := range validatorCandidate {
		validatorCandidateRule = append(validatorCandidateRule, validatorCandidateItem)
	}

	var guarantorRule []interface{}
	for _, guarantorItem := range guarantor {
		guarantorRule = append(guarantorRule, guarantorItem)
	}

	logs, sub, err := _ValidatorCollateralManager.contract.WatchLogs(opts, "ValidatorCollateralWithdrawal", subchainIDRule, validatorCandidateRule, guarantorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorCollateralManagerValidatorCollateralWithdrawal)
				if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorCollateralWithdrawal is a log parse operation binding the contract event 0xf049ce4b58effbdd85cc8fbcf48a4e549f4a53a2a9b90bb49b95b97ddce36af1.
//
// Solidity: event ValidatorCollateralWithdrawal(uint256 indexed subchainID, address indexed validatorCandidate, uint256 collateralAmount, address indexed guarantor)
func (_ValidatorCollateralManager *ValidatorCollateralManagerFilterer) ParseValidatorCollateralWithdrawal(log types.Log) (*ValidatorCollateralManagerValidatorCollateralWithdrawal, error) {
	event := new(ValidatorCollateralManagerValidatorCollateralWithdrawal)
	if err := _ValidatorCollateralManager.contract.UnpackLog(event, "ValidatorCollateralWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
