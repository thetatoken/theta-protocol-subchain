// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ValidatorStakeManagerStake is an auto generated low-level Go binding around an user-defined struct.
type ValidatorStakeManagerStake struct {
	Validator   common.Address
	ShareAmount *big.Int
}

// ValidatorStakeManagerStakeSnapshot is an auto generated low-level Go binding around an user-defined struct.
type ValidatorStakeManagerStakeSnapshot struct {
	Height *big.Int
	Stakes []ValidatorStakeManagerStake
}

// ValidatorStakeManagerMetaData contains all meta data concerning the ValidatorStakeManager contract.
var ValidatorStakeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainRegistrarOnMainchain_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numBlocksPerDynasty_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalPendingPeriodInBlocks_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"UpdateOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subchainGovernanceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"govTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ValidatorStakeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subchainGovernanceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"govTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ValidatorStakeReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subchainGovernanceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"govTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"ValidatorStakeWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainRegistrarOnMainchain\",\"outputs\":[{\"internalType\":\"contractChainRegistrarOnMainchain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerDynasty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshotHeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPendingPeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalQueues\",\"outputs\":[{\"internalType\":\"contractWithdrawalQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"govTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"getPendingGovernanceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"claimStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"getStakeSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"targetSnapshotHeight\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"internalType\":\"structValidatorStakeManager.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"structValidatorStakeManager.StakeSnapshot\",\"name\":\"targetStakeSnapshot\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"getWithdrawalQueue\",\"outputs\":[{\"internalType\":\"contractWithdrawalQueue\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"getStakeSnapshotHeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getValidatorShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAValidator\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"}],\"name\":\"getDynastyStartingHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"}],\"name\":\"totalShareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"shareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"estimatedGovernanceTokenOwnedBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"hasImplementedStakerReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620045b3380380620045b383398101604081905262000034916200008c565b600080546001600160a01b039586166001600160a01b03199182161790915560019290925560025560038054929093169116179055620000d4565b80516001600160a01b03811681146200008757600080fd5b919050565b60008060008060808587031215620000a357600080fd5b620000ae856200006f565b9350620000be602086016200006f565b6040860151606090960151949790965092505050565b6144cf80620000e46000396000f3fe60806040523480156200001157600080fd5b5060043610620001695760003560e01c80636a59c3d411620000d357806390e7e395116200008657806390e7e39514620003e5578063b49d964614620003fc578063b9d392841462000413578063c0cc5e89146200042a578063c4ff90851462000441578063e9ed30e0146200045857600080fd5b80636a59c3d4146200030b5780636b529ac41462000337578063746348ac146200036b5780637743b6d3146200038e578063880cdc3114620003ba5780638da5cb5b14620003d157600080fd5b80633f216374116200012c5780633f216374146200023357806343f27e45146200026257806344669c03146200028957806352a8042114620002b15780635484274714620002c857806367016090146200030157600080fd5b8063192e1574146200016e5780631af10d7d146200019a5780631ce9f8ae14620001ea578063331515bc1462000203578063336c73081462000229575b600080fd5b60035462000182906001600160a01b031681565b60405162000191919062002e53565b60405180910390f35b620001db620001ab36600462002d2c565b60009283526006602090815260408085206001600160a01b03948516865282528085209290931684525290205490565b60405190815260200162000191565b62000201620001fb36600462002d73565b62000480565b005b6200021a6200021436600462002cc5565b62000abd565b60405162000191919062002f05565b620001db60025481565b6200024a6200024436600462002de5565b62000b21565b60408051921515835260208301919091520162000191565b620002796200027336600462002dc2565b62000c48565b6040516200019192919062002ea1565b620002a06200029a36600462002dc2565b62000e4d565b604051620001919392919062002f1a565b620001db620002c236600462002cf9565b62001176565b620001db620002d936600462002cf9565b60009182526008602090815260408084206001600160a01b0393909316845291905290205490565b620001db60015481565b620001826200031c36600462002cc5565b6000908152600a60205260409020546001600160a01b031690565b620001db6200034836600462002d2c565b600660209081526000938452604080852082529284528284209052825290205481565b620001db6200037c36600462002cc5565b60009081526007602052604090205490565b620001826200039f36600462002cc5565b600a602052600090815260409020546001600160a01b031681565b62000201620003cb36600462002848565b620013ad565b60005462000182906001600160a01b031681565b620001db620003f636600462002cc5565b62001443565b620001db6200040d36600462002cc5565b62001630565b620002016200042436600462002d73565b6200166d565b620002016200043b36600462002cf9565b62002021565b620001db6200045236600462002dc2565b6200243a565b6200046f6200046936600462002848565b6200246c565b604051901515815260200162000191565b6000546001600160a01b03163314620004b65760405162461bcd60e51b8152600401620004ad906200302d565b60405180910390fd5b6003546040516378154cf760e01b8152600481018690526000916001600160a01b0316906378154cf79060240160006040518083038186803b158015620004fc57600080fd5b505afa15801562000511573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200053b919081019062002b68565b90508060a00151620005615760405162461bcd60e51b8152600401620004ad9062002fe9565b6040808201516000878152600960205291909120546200058d5760008681526009602052604090204390555b6200059886620024af565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190620005c990309060040162002e53565b60206040518083038186803b158015620005e257600080fd5b505afa158015620005f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200061d919062002cdf565b6040516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201889052919250908316906323b872dd90606401602060405180830381600087803b1580156200067257600080fd5b505af115801562000687573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ad919062002a1a565b620006cc5760405162461bcd60e51b8152600401620004ad9062002f9d565b600087815260076020526040812054620006e857508462000714565b600088815260076020526040902054620007119083906200070a9089620026f4565b9062002709565b90505b6000888152600760205260409020546200072f908262002717565b600089815260076020908152604080832093909355600881528282206001600160a01b03891683529052205462000767908262002717565b60008981526008602090815260408083206001600160a01b038a1684529091528082209290925590516344669c0360e01b8152600481018a90524360248201819052919030906344669c039060440160006040518083038186803b158015620007cf57600080fd5b505afa158015620007e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200080e919081019062002a38565b60008d8152600460209081526040808320888452909152812086905590935091508190505b82602001515181101562000970576000836020015182815181106200085c576200085c620031bb565b60200260200101516020015190508b6001600160a01b0316846020015183815181106200088d576200088d620031bb565b6020026020010151600001516001600160a01b03161415620008bc57620008b5818762002717565b9050600192505b600460008e81526020019081526020016000206000868152602001908152602001600020600101604051806040016040528086602001518581518110620009075762000907620031bb565b602090810291909101810151516001600160a01b03908116835291810194909452825460018082018555600094855293859020835160029092020180546001600160a01b0319169190921617815592015191015580620009678162003187565b91505062000833565b5080620009e45760008b8152600460209081526040808320868452825280832081518083019092526001600160a01b038e81168352828401898152600192830180548085018255908752949095209251600290940290920180546001600160a01b0319169390921692909217815591519101555b50506000898152600560209081526040808320805460018101825590845282842001939093558a8252600681528282206001600160a01b03808c16845290825283832090891683529052205462000a3c818362002717565b60008a81526006602090815260408083206001600160a01b03808e16808652918452828520908c1680865293529281902084905551929350918b907fb4b56601301e6d487e3bc6a7911c4e20df2bced1a62f677faee5c20896b486419062000aaa9089908d90899062002e80565b60405180910390a4505050505050505050565b60008181526005602090815260409182902080548351818402810184019094528084526060939283018282801562000b1557602002820191906000526020600020905b81548152602001906001019080831162000b00575b50505050509050919050565b6040516343f27e4560e01b8152600481018490526024810183905260009081908190819030906343f27e459060440160006040518083038186803b15801562000b6957600080fd5b505afa15801562000b7e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000ba89190810190620028a0565b8151919350915060005b8181101562000c3457866001600160a01b031684828151811062000bda5762000bda620031bb565b60200260200101516001600160a01b0316141562000c1f57600183828151811062000c095762000c09620031bb565b6020026020010151955095505050505062000c40565b8062000c2b8162003187565b91505062000bb2565b50600080945094505050505b935093915050565b60608060008362000c5c5750600062000c7d565b60018460015462000c6e91906200314b565b62000c7a91906200316d565b90505b6040516344669c0360e01b8152600481018690526024810182905260009030906344669c039060440160006040518083038186803b15801562000cbf57600080fd5b505afa15801562000cd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cfe919081019062002a38565b9250505060008160200151519050806001600160401b0381111562000d275762000d27620031d1565b60405190808252806020026020018201604052801562000d51578160200160208202803683370190505b509450806001600160401b0381111562000d6f5762000d6f620031d1565b60405190808252806020026020018201604052801562000d99578160200160208202803683370190505b50935060005b8181101562000e425760008360200151828151811062000dc35762000dc3620031bb565b60200260200101519050806000015187838151811062000de75762000de7620031bb565b60200260200101906001600160a01b031690816001600160a01b031681525050806020015186838151811062000e215762000e21620031bb565b6020908102919091010152508062000e398162003187565b91505062000d9f565b505050509250929050565b60008062000e6e604051806040016040528060008152602001606081525090565b6000858152600560205260409020805462000e915760008093509350506200116f565b8060008154811062000ea75762000ea7620031bb565b906000526020600020015485101562000ec85760008093509350506200116f565b8054600090829062000edd906001906200316d565b8154811062000ef05762000ef0620031bb565b9060005260206000200154905085811162000fb757600087815260046020908152604080832084845282528083208151808301835281548152600182810180548551818802810188019096528086529196889694959394869486820194909392909184015b8282101562000f9f576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910162000f55565b5050505081525050905094509450945050506200116f565b8154600090819062000fcc906001906200316d565b905083828154811062000fe35762000fe3620031bb565b906000526020600020015495505b81811115620010c957600060026200100a84846200316d565b62001016919062003128565b6200102290836200316d565b905060008582815481106200103b576200103b620031bb565b90600052602060002001549050898114156200105b579650620010c99050565b898110156200108f578193508584815481106200107c576200107c620031bb565b90600052602060002001549750620010c1565b6200109c6001836200316d565b9250858481548110620010b357620010b3620031bb565b906000526020600020015497505b505062000ff1565b6000898152600460209081526040808320898452825280832081518083018352815481526001820180548451818702810187019095528085529195929486810194939192919084015b828210156200115c576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260019081015482840152908352909201910162001112565b5050505081525050945060019650505050505b9250925092565b6000828152600760205260408120546200119357506000620013a7565b6003546040516378154cf760e01b8152600481018590526000916001600160a01b0316906378154cf79060240160006040518083038186803b158015620011d957600080fd5b505afa158015620011ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001218919081019062002b68565b604080820151600087815260096020529182205492935091439190808310620012ca57620012c76200124b848362002725565b856001600160a01b03166324e770d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200128557600080fd5b505afa1580156200129a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012c0919062002cdf565b90620026f4565b91505b60008881526008602090815260408083206001600160a01b03808c16855292528083205490516370a0823160e01b8152909291620013789186918916906370a08231906200131d90309060040162002e53565b60206040518083038186803b1580156200133657600080fd5b505afa1580156200134b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001371919062002cdf565b9062002717565b60008b815260076020526040812054919250906200139c906200070a8486620026f4565b985050505050505050505b92915050565b6000546001600160a01b03163314620013da5760405162461bcd60e51b8152600401620004ad906200302d565b600054604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600a60205260408120546001600160a01b03166200146857506000919050565b6000828152600a6020526040808220548151638a80976760e01b815291516001600160a01b039091169183918391638a8097679160048083019286929190829003018186803b158015620014bb57600080fd5b505afa158015620014d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014fa919081019062002868565b905060005b815181101562001626576000828281518110620015205762001520620031bb565b602002602001015190506000846001600160a01b0316637d031b65836040518263ffffffff1660e01b81526004016200155a919062002e53565b60006040518083038186803b1580156200157357600080fd5b505afa15801562001588573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620015b291908101906200296d565b905060005b81518110156200160d57620015f6828281518110620015da57620015da620031bb565b602002602001015160200151886200271790919063ffffffff16565b965080620016048162003187565b915050620015b7565b50505080806200161d9062003187565b915050620014ff565b5091949350505050565b6000806200164a600154846200270990919063ffffffff16565b905060006200166560015483620026f490919063ffffffff16565b949350505050565b6000546001600160a01b031633146200169a5760405162461bcd60e51b8152600401620004ad906200302d565b60008211620016e35760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081cda185c9948185b5bdd5b9d60621b6044820152606401620004ad565b600084815260076020526040902054821115620017645760405162461bcd60e51b815260206004820152603860248201527f74686520737562636861696e20646f6573206e6f7420686176652073756666696044820152776369656e742073686172657320746f20776974686472617760401b6064820152608401620004ad565b60008481526008602090815260408083206001600160a01b0385168452909152902054821115620017f75760405162461bcd60e51b815260206004820152603660248201527f746865207374616b657220646f6573206e6f7420686176652073756666696369604482015275656e742073686172657320746f20776974686472617760501b6064820152608401620004ad565b6200180284620024af565b6003546040516378154cf760e01b8152600481018690526000916001600160a01b0316906378154cf79060240160006040518083038186803b1580156200184857600080fd5b505afa1580156200185d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001887919081019062002b68565b60408082015190516370a0823160e01b8152919250906000906001600160a01b038316906370a0823190620018c190309060040162002e53565b60206040518083038186803b158015620018da57600080fd5b505afa158015620018ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001915919062002cdf565b6040516390e7e39560e01b815260048101899052909150600090819030906390e7e3959060240160206040518083038186803b1580156200195557600080fd5b505afa1580156200196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001990919062002cdf565b905082811115620019dd5760405162461bcd60e51b81526020600482015260166024820152751a5b9d985b1a59081c195b991a5b99c8185b5bdd5b9d60521b6044820152606401620004ad565b60008981526007602052604090205462001a02906200070a89620012c0878662002725565b60008a81526007602052604090205490925062001a2191508762002725565b600089815260076020908152604080832093909355600881528282206001600160a01b03891683529052205462001a59908762002725565b60008981526008602090815260408083206001600160a01b038a1684529091528082209290925590516344669c0360e01b8152600481018a905243602482018190529190819030906344669c039060440160006040518083038186803b15801562001ac357600080fd5b505afa15801562001ad8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001b02919081019062002a38565b92505091508162001b6d5760405162461bcd60e51b815260206004820152602e60248201527f6e6f207374616b6520736e617073686f742065786974732c2063616e6e6f742060448201526d7769746864726177207374616b6560901b6064820152608401620004ad565b60008b81526004602090815260408083208684529091528120849055805b82602001515181101562001d4a5760008360200151828151811062001bb45762001bb4620031bb565b60200260200101516020015190508c6001600160a01b03168460200151838151811062001be55762001be5620031bb565b6020026020010151600001516001600160a01b0316141562001c8c578b81101562001c795760405162461bcd60e51b815260206004820152603c60248201527f76616c696461746f7227732072656d61696e696e67207368617265206c6f776560448201527f72207468616e20746865207769746864726177616c20616d6f756e74000000006064820152608401620004ad565b62001c85818d62002725565b9050600192505b801562001d3457600460008f8152602001908152602001600020600087815260200190815260200160002060010160405180604001604052808660200151858151811062001cde5762001cde620031bb565b602090810291909101810151516001600160a01b039081168352918101859052835460018082018655600095865294829020845160029092020180546001600160a01b0319169190931617825591909101519101555b508062001d418162003187565b91505062001b8b565b508062001dab5760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f7420756e7374616b652066726f6d2061206e6f6e2d76616c696461604482015267746f72206e6f646560c01b6064820152608401620004ad565b50505060008981526005602090815260408083208054600181018255908452828420439101558b8352600682528083206001600160a01b03808d168552908352818420908a16845290915290205490508681101562001e4d5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420656e6f7567682072656d61696e696e672073686172650000000000006044820152606401620004ad565b62001e59818862002725565b60008a81526006602090815260408083206001600160a01b03808e1685529083528184208b8216855283528184208590558d8452600a909252909120549192501662001f35578460a0015162001ec35760405162461bcd60e51b8152600401620004ad9062002fe9565b833060405162001ed39062002733565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801562001f07573d6000803e3d6000fd5b5060008a8152600a6020526040902080546001600160a01b0319166001600160a01b03929092169190911790555b60006002544362001f4791906200310d565b60008b8152600a602052604090819020549051639b939b2160e01b81529192506001600160a01b031690639b939b219062001f8b908a908790869060040162002e80565b600060405180830381600087803b15801562001fa657600080fd5b505af115801562001fbb573d6000803e3d6000fd5b50505050866001600160a01b0316896001600160a01b03168b7f6f9a3eaaf9b34fce3afb673b23786645846fee391ea3f9b8a2b2741bc0627fe28960400151878d6040516200200d9392919062002e80565b60405180910390a450505050505050505050565b6000546001600160a01b031633146200204e5760405162461bcd60e51b8152600401620004ad906200302d565b6000828152600a60205260409020546001600160a01b0316620020fa5760405162461bcd60e51b815260206004820152605760248201527f746865207769746864726177616c20717565756520646f6573206e6f7420657860448201527f69737420666f722074686520737562636861696e2c2068617320616e79207374606482015276616b65206265656e2077697468647261776e207965743f60481b608482015260a401620004ad565b6000828152600a60205260409081902054905163619172b760e01b81526001600160a01b039091169063619172b7906200213990849060040162002e53565b60606040518083038186803b1580156200215257600080fd5b505afa15801562002167573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200218d919062002ca6565b60400151431015620021f95760405162461bcd60e51b815260206004820152602e60248201527f6e6f207374616b6520697320726561647920746f20626520636c61696d65642060448201526d3337b9103a34329039ba30b5b2b960911b6064820152608401620004ad565b6000828152600a60205260408082205490516302f1e63f60e31b81526001600160a01b039091169063178f31f8906200223790859060040162002e53565b606060405180830381600087803b1580156200225257600080fd5b505af115801562002267573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200228d919062002ca6565b60208101516003546040516378154cf760e01b81526004810187905292935090916000916001600160a01b0316906378154cf79060240160006040518083038186803b158015620022dd57600080fd5b505afa158015620022f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200231c919081019062002b68565b90508060a00151620023425760405162461bcd60e51b8152600401620004ad9062002fe9565b604080820151905163a9059cbb60e01b81526001600160a01b0382169063a9059cbb9062002377908890879060040162002e67565b602060405180830381600087803b1580156200239257600080fd5b505af1158015620023a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023cd919062002a1a565b620023ec5760405162461bcd60e51b8152600401620004ad9062002f9d565b846001600160a01b0316867ff2b7d7e64fef4a69e46e34e4d45de5951b9a9b2679adf7520d8bf6a16376692d83866040516200242a92919062002e67565b60405180910390a3505050505050565b600560205281600052604060002081815481106200245757600080fd5b90600052602060002001600091509150505481565b6040805160048152602481019091526020810180516001600160e01b031663024e770d60e41b178152815160009283929091839182919082885af1949350505050565b600081815260096020526040902054438110620024ca575050565b6003546040516378154cf760e01b8152600481018490526000916001600160a01b0316906378154cf79060240160006040518083038186803b1580156200251057600080fd5b505afa15801562002525573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200254f919081019062002b68565b90508060a00151620025755760405162461bcd60e51b8152600401620004ad9062002fe9565b604080820151905163074f698760e51b8152309063e9ed30e0906200259f90849060040162002e53565b602060405180830381600087803b158015620025ba57600080fd5b505af1158015620025cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025f5919062002a1a565b620026005750505050565b60006200260e438562002725565b905060006200265182846001600160a01b03166324e770d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200128557600080fd5b600087815260096020526040908190204390555163ab8e786f60e01b81529091506001600160a01b0384169063ab8e786f9062002695903090859060040162002e67565b602060405180830381600087803b158015620026b057600080fd5b505af1158015620026c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026eb919062002a1a565b50505050505050565b60006200270282846200314b565b9392505050565b600062002702828462003128565b60006200270282846200310d565b60006200270282846200316d565b611299806200320183390190565b600082601f8301126200275357600080fd5b815160206200276c6200276683620030e7565b620030b4565b80838252828201915082860187848660051b89010111156200278d57600080fd5b60005b85811015620027b9578151620027a681620031e7565b8452928401929084019060010162002790565b5090979650505050505050565b80518015158114620027d757600080fd5b919050565b600060608284031215620027ef57600080fd5b604051606081018181106001600160401b0382111715620028145762002814620031d1565b806040525080915082516200282981620031e7565b8082525060208301516020820152604083015160408201525092915050565b6000602082840312156200285b57600080fd5b81356200270281620031e7565b6000602082840312156200287b57600080fd5b81516001600160401b038111156200289257600080fd5b620016658482850162002741565b60008060408385031215620028b457600080fd5b82516001600160401b0380821115620028cc57600080fd5b620028da8683870162002741565b9350602091508185015181811115620028f257600080fd5b85019050601f810186136200290657600080fd5b8051620029176200276682620030e7565b80828252848201915084840189868560051b87010111156200293857600080fd5b600094505b838510156200295d5780518352600194909401939185019185016200293d565b5080955050505050509250929050565b600060208083850312156200298157600080fd5b82516001600160401b038111156200299857600080fd5b8301601f81018513620029aa57600080fd5b8051620029bb6200276682620030e7565b818152838101908385016060808502860187018a1015620029db57600080fd5b600095505b8486101562002a0c57620029f58a83620027dc565b8452600195909501949286019290810190620029e0565b509098975050505050505050565b60006020828403121562002a2d57600080fd5b6200270282620027c6565b60008060006060848603121562002a4e57600080fd5b62002a5984620027c6565b925060208085015192506040808601516001600160401b038082111562002a7f57600080fd5b818801915082828a03121562002a9457600080fd5b62002a9e62003064565b82518152848301518281111562002ab457600080fd5b80840193505089601f84011262002aca57600080fd5b8251915062002add6200276683620030e7565b8083825286820191508685018c888660061b880101111562002afe57600080fd5b60009550855b8581101562002b505787828f03121562002b1c578687fd5b62002b2662003064565b825162002b3381620031e7565b8152828a01518a8201528452928801929087019060010162002b04565b50508087840152505080955050505050509250925092565b6000602080838503121562002b7c57600080fd5b82516001600160401b038082111562002b9457600080fd5b9084019060c0828703121562002ba957600080fd5b62002bb36200308f565b825162002bc081620031e7565b81528284015184820152604083015162002bda81620031e7565b604082015260608301518281111562002bf257600080fd5b8301601f8101881362002c0457600080fd5b80518381111562002c195762002c19620031d1565b62002c2d601f8201601f19168701620030b4565b9350808452888682840101111562002c4457600080fd5b60005b8181101562002c6457828101870151858201880152860162002c47565b8181111562002c765760008783870101525b5050508160608201526080830151608082015262002c9760a08401620027c6565b60a08201529695505050505050565b60006060828403121562002cb957600080fd5b620027028383620027dc565b60006020828403121562002cd857600080fd5b5035919050565b60006020828403121562002cf257600080fd5b5051919050565b6000806040838503121562002d0d57600080fd5b82359150602083013562002d2181620031e7565b809150509250929050565b60008060006060848603121562002d4257600080fd5b83359250602084013562002d5681620031e7565b9150604084013562002d6881620031e7565b809150509250925092565b6000806000806080858703121562002d8a57600080fd5b84359350602085013562002d9e81620031e7565b925060408501359150606085013562002db781620031e7565b939692955090935050565b6000806040838503121562002dd657600080fd5b50508035926020909101359150565b60008060006060848603121562002dfb57600080fd5b8335925060208401359150604084013562002d6881620031e7565b600081518084526020808501945080840160005b8381101562002e485781518752958201959082019060010162002e2a565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b604080825283519082018190526000906020906060840190828701845b8281101562002ee55781516001600160a01b03168452928401929084019060010162002ebe565b5050508381038285015262002efb818662002e16565b9695505050505050565b60208152600062002702602083018462002e16565b8315158152600060208481840152604060608185015260a08401855160608601528286015182608087015281815180845260c0880191508583019350600092505b8083101562002f8f57835180516001600160a01b031683528601518683015292850192600192909201919084019062002f5b565b509998505050505050505050565b6020808252602c908201527f6661696c656420746f207472616e7366657220737562636861696e20676f766560408201526b393730b731b2903a37b5b2b760a11b606082015260800190565b60208082526024908201527f74686520737562636861696e4944206973206e6f742072656769737465726564604082015263081e595d60e21b606082015260800190565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b604080519081016001600160401b0381118282101715620030895762003089620031d1565b60405290565b60405160c081016001600160401b0381118282101715620030895762003089620031d1565b604051601f8201601f191681016001600160401b0381118282101715620030df57620030df620031d1565b604052919050565b60006001600160401b03821115620031035762003103620031d1565b5060051b60200190565b60008219821115620031235762003123620031a5565b500190565b6000826200314657634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615620031685762003168620031a5565b500290565b600082821015620031825762003182620031a5565b500390565b60006000198214156200319e576200319e620031a5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620031fd57600080fd5b5056fe608060405234801561001057600080fd5b5060405161129938038061129983398101604081905261002f91610158565b600080546001600160a01b0319166001600160a01b038381169190911790915582166100b15760405162461bcd60e51b815260206004820152602660248201527f696e76616c696420746f6b656e20666f7220746865207769746864726177616c60448201526520717565756560d01b60648201526084015b60405180910390fd5b6001600160a01b0381166101165760405162461bcd60e51b815260206004820152602660248201527f696e76616c6964206f776e657220666f7220746865207769746864726177616c60448201526520717565756560d01b60648201526084016100a8565b50600180546001600160a01b0319166001600160a01b039290921691909117905561018b565b80516001600160a01b038116811461015357600080fd5b919050565b6000806040838503121561016b57600080fd5b6101748361013c565b91506101826020840161013c565b90509250929050565b6110ff8061019a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638a809767116100715780638a809767146101595780638da5cb5b1461016e5780639b939b2114610199578063bfd772fc146101ac578063efb166d0146101bf578063fc0c546a146101e157600080fd5b806302fb4d85146100b9578063178f31f8146100df578063619172b7146100ff578063681fe70c146101125780637d031b6514610124578063880cdc3114610144575b600080fd5b6100cc6100c7366004610eb0565b6101f4565b6040519081526020015b60405180910390f35b6100f26100ed366004610e95565b61053f565b6040516100d6919061102f565b6100f261010d366004610e95565b610985565b600354604051901581526020016100d6565b610137610132366004610e95565b610a8d565b6040516100d69190610fb6565b610157610152366004610e95565b610b23565b005b610161610bb6565b6040516100d69190610f69565b600054610181906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b6101576101a7366004610eda565b610c18565b6101816101ba366004610f0d565b610d6a565b6101d26101cd366004610eb0565b610d94565b6040516100d693929190610f48565b600154610181906001600160a01b031681565b600080546001600160a01b031633146102285760405162461bcd60e51b815260040161021f90610ff8565b60405180910390fd5b506000805b6001600160a01b0384166000908152600260205260409020548110156105375760006102598484610de0565b6001600160a01b03861660009081526002602052604090208054919250829184908110610288576102886110b3565b906000526020600020906003020160010154116103f7576001600160a01b038516600090815260026020526040902080547f856403611d5b78b55440b0a08dbac9c93dd6ceb984ac669a8c6052460115b259918791859081106102ed576102ed6110b3565b90600052602060002090600302016001015460026000896001600160a01b03166001600160a01b031681526020019081526020016000208581548110610335576103356110b3565b90600052602060002090600302016002015460405161035693929190610f48565b60405180910390a16001600160a01b038516600090815260026020526040902080546103ae91908490811061038d5761038d6110b3565b90600052602060002090600302016001015484610df390919063ffffffff16565b6001600160a01b038616600090815260026020526040812080549295509091849081106103dd576103dd6110b3565b906000526020600020906003020160010181905550610524565b7f856403611d5b78b55440b0a08dbac9c93dd6ceb984ac669a8c6052460115b259858260026000896001600160a01b03166001600160a01b031681526020019081526020016000208581548110610450576104506110b3565b90600052602060002090600302016002015460405161047193929190610f48565b60405180910390a16104838382610df3565b92506104df8160026000886001600160a01b03166001600160a01b0316815260200190815260200160002084815481106104bf576104bf6110b3565b906000526020600020906003020160010154610de090919063ffffffff16565b6001600160a01b0386166000908152600260205260409020805484908110610509576105096110b3565b90600052602060002090600302016001018190555050610537565b508061052f8161106c565b91505061022d565b505b92915050565b610547610dff565b6000546001600160a01b031633146105715760405162461bcd60e51b815260040161021f90610ff8565b6001600160a01b0382166000908152600260205260409020546105f85760405162461bcd60e51b815260206004820152603960248201527f746865207769746864726177616c20717565756520666f72207468652072656360448201527865697665722073686f756c64206e6f7420626520656d70747960381b606482015260840161021f565b6003546000805b8282101561065957846001600160a01b031660038381548110610624576106246110b3565b6000918252602090912001546001600160a01b0316141561064757506001610659565b816106518161106c565b9250506105ff565b806106b85760405162461bcd60e51b815260206004820152602960248201527f6e6f206d61746368656420726563656976657220666f756e642c2063616e6e6f60448201526874206465717565756560b81b606482015260840161021f565b6001600160a01b0385166000908152600260205260408120805482906106e0576106e06110b3565b6000918252602080832060408051606081018252600390940290910180546001600160a01b031684526001810154928401929092526002909101549082015291505b6001600160a01b03871660009081526002602052604090205461074790600190611055565b811015610819576001600160a01b038716600090815260026020526040902061077182600161103d565b81548110610781576107816110b3565b906000526020600020906003020160026000896001600160a01b03166001600160a01b0316815260200190815260200160002082815481106107c5576107c56110b3565b60009182526020909120825460039092020180546001600160a01b0319166001600160a01b0390921691909117815560018083015490820155600291820154910155806108118161106c565b915050610722565b506001600160a01b03861660009081526002602052604090208054806108415761084161109d565b6000828152602080822060036000199094019384020180546001600160a01b0319168155600181018390556002908101839055929093556001600160a01b03891681529152604090205461097a576001600160a01b03861660009081526002602052604081206108b091610e29565b6108bb600185611055565b8310156109465760036108cf84600161103d565b815481106108df576108df6110b3565b600091825260209091200154600380546001600160a01b03909216918590811061090b5761090b6110b3565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558261093e8161106c565b9350506108b0565b60038054806109575761095761109d565b600082815260209020810160001990810180546001600160a01b03191690550190555b93505050505b919050565b61098d610dff565b6001600160a01b038216600090815260026020908152604080832080548251818502810185019093528083529192909190849084015b82821015610a18576000848152602090819020604080516060810182526003860290920180546001600160a01b03168352600180820154848601526002909101549183019190915290835290920191016109c3565b5050505090506000815111610a645760405162461bcd60e51b815260206004820152601260248201527174686520717565756520697320656d70747960701b604482015260640161021f565b600081600081518110610a7957610a796110b3565b602002602001015190508092505050919050565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609493849084015b82821015610b17576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018082015484860152600290910154918301919091529083529092019101610ac2565b50929695505050505050565b6000546001600160a01b03163314610b4d5760405162461bcd60e51b815260040161021f90610ff8565b600054604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600080546001600160a01b0319166001600160a01b0392909216919091179055565b60606003805480602002602001604051908101604052809291908181526020018280548015610c0e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bf0575b5050505050905090565b6000546001600160a01b03163314610c425760405162461bcd60e51b815260040161021f90610ff8565b6001600160a01b03838116600081815260026020818152604080842081516060810183529586528583018981529186018881528154600180820184559287529386209651600390940290960180546001600160a01b03191693909716929092178655519085015591519290910191909155805b600354811015610d1257846001600160a01b031660038281548110610cdc57610cdc6110b3565b6000918252602090912001546001600160a01b03161415610d005760019150610d12565b80610d0a8161106c565b915050610cb5565b5080610d6457600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0386161790555b50505050565b60038181548110610d7a57600080fd5b6000918252602090912001546001600160a01b0316905081565b60026020528160005260406000208181548110610db057600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03909116935090915083565b6000610dec8284611055565b9392505050565b6000610dec828461103d565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190610e4a9190610e4d565b50565b5b80821115610e7a5780546001600160a01b03191681556000600182018190556002820155600301610e4e565b5090565b80356001600160a01b038116811461098057600080fd5b600060208284031215610ea757600080fd5b610dec82610e7e565b60008060408385031215610ec357600080fd5b610ecc83610e7e565b946020939093013593505050565b600080600060608486031215610eef57600080fd5b610ef884610e7e565b95602085013595506040909401359392505050565b600060208284031215610f1f57600080fd5b5035919050565b80516001600160a01b0316825260208082015190830152604090810151910152565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015610faa5783516001600160a01b031683529284019291840191600101610f85565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610faa57610fe5838551610f26565b9284019260609290920191600101610fd2565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b606081016105398284610f26565b6000821982111561105057611050611087565b500190565b60008282101561106757611067611087565b500390565b600060001982141561108057611080611087565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212208aa4404c497cb96cca03de5524f70d53f6fed2cd771deae440e8ff443535c7a464736f6c63430008070033a2646970667358221220ed796ad07e0a471dc3fb8955f6de650b8a69ff68877ba329db51dfa00461de0564736f6c63430008070033",
}

// ValidatorStakeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ValidatorStakeManagerMetaData.ABI instead.
var ValidatorStakeManagerABI = ValidatorStakeManagerMetaData.ABI

// ValidatorStakeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValidatorStakeManagerMetaData.Bin instead.
var ValidatorStakeManagerBin = ValidatorStakeManagerMetaData.Bin

// DeployValidatorStakeManager deploys a new Ethereum contract, binding an instance of ValidatorStakeManager to it.
func DeployValidatorStakeManager(auth *bind.TransactOpts, backend bind.ContractBackend, owner_ common.Address, chainRegistrarOnMainchain_ common.Address, numBlocksPerDynasty_ *big.Int, withdrawalPendingPeriodInBlocks_ *big.Int) (common.Address, *types.Transaction, *ValidatorStakeManager, error) {
	parsed, err := ValidatorStakeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValidatorStakeManagerBin), backend, owner_, chainRegistrarOnMainchain_, numBlocksPerDynasty_, withdrawalPendingPeriodInBlocks_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorStakeManager{ValidatorStakeManagerCaller: ValidatorStakeManagerCaller{contract: contract}, ValidatorStakeManagerTransactor: ValidatorStakeManagerTransactor{contract: contract}, ValidatorStakeManagerFilterer: ValidatorStakeManagerFilterer{contract: contract}}, nil
}

// ValidatorStakeManager is an auto generated Go binding around an Ethereum contract.
type ValidatorStakeManager struct {
	ValidatorStakeManagerCaller     // Read-only binding to the contract
	ValidatorStakeManagerTransactor // Write-only binding to the contract
	ValidatorStakeManagerFilterer   // Log filterer for contract events
}

// ValidatorStakeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValidatorStakeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorStakeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValidatorStakeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorStakeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValidatorStakeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorStakeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValidatorStakeManagerSession struct {
	Contract     *ValidatorStakeManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ValidatorStakeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValidatorStakeManagerCallerSession struct {
	Contract *ValidatorStakeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ValidatorStakeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValidatorStakeManagerTransactorSession struct {
	Contract     *ValidatorStakeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ValidatorStakeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValidatorStakeManagerRaw struct {
	Contract *ValidatorStakeManager // Generic contract binding to access the raw methods on
}

// ValidatorStakeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValidatorStakeManagerCallerRaw struct {
	Contract *ValidatorStakeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorStakeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValidatorStakeManagerTransactorRaw struct {
	Contract *ValidatorStakeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorStakeManager creates a new instance of ValidatorStakeManager, bound to a specific deployed contract.
func NewValidatorStakeManager(address common.Address, backend bind.ContractBackend) (*ValidatorStakeManager, error) {
	contract, err := bindValidatorStakeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManager{ValidatorStakeManagerCaller: ValidatorStakeManagerCaller{contract: contract}, ValidatorStakeManagerTransactor: ValidatorStakeManagerTransactor{contract: contract}, ValidatorStakeManagerFilterer: ValidatorStakeManagerFilterer{contract: contract}}, nil
}

// NewValidatorStakeManagerCaller creates a new read-only instance of ValidatorStakeManager, bound to a specific deployed contract.
func NewValidatorStakeManagerCaller(address common.Address, caller bind.ContractCaller) (*ValidatorStakeManagerCaller, error) {
	contract, err := bindValidatorStakeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerCaller{contract: contract}, nil
}

// NewValidatorStakeManagerTransactor creates a new write-only instance of ValidatorStakeManager, bound to a specific deployed contract.
func NewValidatorStakeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorStakeManagerTransactor, error) {
	contract, err := bindValidatorStakeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerTransactor{contract: contract}, nil
}

// NewValidatorStakeManagerFilterer creates a new log filterer instance of ValidatorStakeManager, bound to a specific deployed contract.
func NewValidatorStakeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorStakeManagerFilterer, error) {
	contract, err := bindValidatorStakeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerFilterer{contract: contract}, nil
}

// bindValidatorStakeManager binds a generic wrapper to an already deployed contract.
func bindValidatorStakeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorStakeManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorStakeManager *ValidatorStakeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorStakeManager.Contract.ValidatorStakeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorStakeManager *ValidatorStakeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.ValidatorStakeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorStakeManager *ValidatorStakeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.ValidatorStakeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorStakeManager *ValidatorStakeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ValidatorStakeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.contract.Transact(opts, method, params...)
}

// ChainRegistrarOnMainchain is a free data retrieval call binding the contract method 0x192e1574.
//
// Solidity: function chainRegistrarOnMainchain() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) ChainRegistrarOnMainchain(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "chainRegistrarOnMainchain")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChainRegistrarOnMainchain is a free data retrieval call binding the contract method 0x192e1574.
//
// Solidity: function chainRegistrarOnMainchain() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) ChainRegistrarOnMainchain() (common.Address, error) {
	return _ValidatorStakeManager.Contract.ChainRegistrarOnMainchain(&_ValidatorStakeManager.CallOpts)
}

// ChainRegistrarOnMainchain is a free data retrieval call binding the contract method 0x192e1574.
//
// Solidity: function chainRegistrarOnMainchain() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) ChainRegistrarOnMainchain() (common.Address, error) {
	return _ValidatorStakeManager.Contract.ChainRegistrarOnMainchain(&_ValidatorStakeManager.CallOpts)
}

// EstimatedGovernanceTokenOwnedBy is a free data retrieval call binding the contract method 0x52a80421.
//
// Solidity: function estimatedGovernanceTokenOwnedBy(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) EstimatedGovernanceTokenOwnedBy(opts *bind.CallOpts, subchainID *big.Int, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "estimatedGovernanceTokenOwnedBy", subchainID, staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimatedGovernanceTokenOwnedBy is a free data retrieval call binding the contract method 0x52a80421.
//
// Solidity: function estimatedGovernanceTokenOwnedBy(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) EstimatedGovernanceTokenOwnedBy(subchainID *big.Int, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.EstimatedGovernanceTokenOwnedBy(&_ValidatorStakeManager.CallOpts, subchainID, staker)
}

// EstimatedGovernanceTokenOwnedBy is a free data retrieval call binding the contract method 0x52a80421.
//
// Solidity: function estimatedGovernanceTokenOwnedBy(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) EstimatedGovernanceTokenOwnedBy(subchainID *big.Int, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.EstimatedGovernanceTokenOwnedBy(&_ValidatorStakeManager.CallOpts, subchainID, staker)
}

// GetDynastyStartingHeight is a free data retrieval call binding the contract method 0xb49d9646.
//
// Solidity: function getDynastyStartingHeight(uint256 blockHeight) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetDynastyStartingHeight(opts *bind.CallOpts, blockHeight *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getDynastyStartingHeight", blockHeight)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDynastyStartingHeight is a free data retrieval call binding the contract method 0xb49d9646.
//
// Solidity: function getDynastyStartingHeight(uint256 blockHeight) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetDynastyStartingHeight(blockHeight *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetDynastyStartingHeight(&_ValidatorStakeManager.CallOpts, blockHeight)
}

// GetDynastyStartingHeight is a free data retrieval call binding the contract method 0xb49d9646.
//
// Solidity: function getDynastyStartingHeight(uint256 blockHeight) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetDynastyStartingHeight(blockHeight *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetDynastyStartingHeight(&_ValidatorStakeManager.CallOpts, blockHeight)
}

// GetPendingGovernanceTokenAmount is a free data retrieval call binding the contract method 0x90e7e395.
//
// Solidity: function getPendingGovernanceTokenAmount(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetPendingGovernanceTokenAmount(opts *bind.CallOpts, subchainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getPendingGovernanceTokenAmount", subchainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPendingGovernanceTokenAmount is a free data retrieval call binding the contract method 0x90e7e395.
//
// Solidity: function getPendingGovernanceTokenAmount(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetPendingGovernanceTokenAmount(subchainID *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetPendingGovernanceTokenAmount(&_ValidatorStakeManager.CallOpts, subchainID)
}

// GetPendingGovernanceTokenAmount is a free data retrieval call binding the contract method 0x90e7e395.
//
// Solidity: function getPendingGovernanceTokenAmount(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetPendingGovernanceTokenAmount(subchainID *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetPendingGovernanceTokenAmount(&_ValidatorStakeManager.CallOpts, subchainID)
}

// GetStakeSnapshot is a free data retrieval call binding the contract method 0x44669c03.
//
// Solidity: function getStakeSnapshot(uint256 subchainID, uint256 blockHeight) view returns(bool exists, uint256 targetSnapshotHeight, (uint256,(address,uint256)[]) targetStakeSnapshot)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetStakeSnapshot(opts *bind.CallOpts, subchainID *big.Int, blockHeight *big.Int) (struct {
	Exists               bool
	TargetSnapshotHeight *big.Int
	TargetStakeSnapshot  ValidatorStakeManagerStakeSnapshot
}, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getStakeSnapshot", subchainID, blockHeight)

	outstruct := new(struct {
		Exists               bool
		TargetSnapshotHeight *big.Int
		TargetStakeSnapshot  ValidatorStakeManagerStakeSnapshot
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Exists = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.TargetSnapshotHeight = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TargetStakeSnapshot = *abi.ConvertType(out[2], new(ValidatorStakeManagerStakeSnapshot)).(*ValidatorStakeManagerStakeSnapshot)

	return *outstruct, err

}

// GetStakeSnapshot is a free data retrieval call binding the contract method 0x44669c03.
//
// Solidity: function getStakeSnapshot(uint256 subchainID, uint256 blockHeight) view returns(bool exists, uint256 targetSnapshotHeight, (uint256,(address,uint256)[]) targetStakeSnapshot)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetStakeSnapshot(subchainID *big.Int, blockHeight *big.Int) (struct {
	Exists               bool
	TargetSnapshotHeight *big.Int
	TargetStakeSnapshot  ValidatorStakeManagerStakeSnapshot
}, error) {
	return _ValidatorStakeManager.Contract.GetStakeSnapshot(&_ValidatorStakeManager.CallOpts, subchainID, blockHeight)
}

// GetStakeSnapshot is a free data retrieval call binding the contract method 0x44669c03.
//
// Solidity: function getStakeSnapshot(uint256 subchainID, uint256 blockHeight) view returns(bool exists, uint256 targetSnapshotHeight, (uint256,(address,uint256)[]) targetStakeSnapshot)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetStakeSnapshot(subchainID *big.Int, blockHeight *big.Int) (struct {
	Exists               bool
	TargetSnapshotHeight *big.Int
	TargetStakeSnapshot  ValidatorStakeManagerStakeSnapshot
}, error) {
	return _ValidatorStakeManager.Contract.GetStakeSnapshot(&_ValidatorStakeManager.CallOpts, subchainID, blockHeight)
}

// GetStakeSnapshotHeights is a free data retrieval call binding the contract method 0x331515bc.
//
// Solidity: function getStakeSnapshotHeights(uint256 subchainID) view returns(uint256[])
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetStakeSnapshotHeights(opts *bind.CallOpts, subchainID *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getStakeSnapshotHeights", subchainID)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetStakeSnapshotHeights is a free data retrieval call binding the contract method 0x331515bc.
//
// Solidity: function getStakeSnapshotHeights(uint256 subchainID) view returns(uint256[])
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetStakeSnapshotHeights(subchainID *big.Int) ([]*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetStakeSnapshotHeights(&_ValidatorStakeManager.CallOpts, subchainID)
}

// GetStakeSnapshotHeights is a free data retrieval call binding the contract method 0x331515bc.
//
// Solidity: function getStakeSnapshotHeights(uint256 subchainID) view returns(uint256[])
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetStakeSnapshotHeights(subchainID *big.Int) ([]*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetStakeSnapshotHeights(&_ValidatorStakeManager.CallOpts, subchainID)
}

// GetStakerShares is a free data retrieval call binding the contract method 0x1af10d7d.
//
// Solidity: function getStakerShares(uint256 subchainID, address validator, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetStakerShares(opts *bind.CallOpts, subchainID *big.Int, validator common.Address, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getStakerShares", subchainID, validator, staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakerShares is a free data retrieval call binding the contract method 0x1af10d7d.
//
// Solidity: function getStakerShares(uint256 subchainID, address validator, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetStakerShares(subchainID *big.Int, validator common.Address, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetStakerShares(&_ValidatorStakeManager.CallOpts, subchainID, validator, staker)
}

// GetStakerShares is a free data retrieval call binding the contract method 0x1af10d7d.
//
// Solidity: function getStakerShares(uint256 subchainID, address validator, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetStakerShares(subchainID *big.Int, validator common.Address, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.GetStakerShares(&_ValidatorStakeManager.CallOpts, subchainID, validator, staker)
}

// GetValidatorSet is a free data retrieval call binding the contract method 0x43f27e45.
//
// Solidity: function getValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetValidatorSet is a free data retrieval call binding the contract method 0x43f27e45.
//
// Solidity: function getValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _ValidatorStakeManager.Contract.GetValidatorSet(&_ValidatorStakeManager.CallOpts, subchainID, dynasty)
}

// GetValidatorSet is a free data retrieval call binding the contract method 0x43f27e45.
//
// Solidity: function getValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _ValidatorStakeManager.Contract.GetValidatorSet(&_ValidatorStakeManager.CallOpts, subchainID, dynasty)
}

// GetValidatorShares is a free data retrieval call binding the contract method 0x3f216374.
//
// Solidity: function getValidatorShares(uint256 subchainID, uint256 dynasty, address addr) view returns(bool isAValidator, uint256 shareAmount)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetValidatorShares(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int, addr common.Address) (struct {
	IsAValidator bool
	ShareAmount  *big.Int
}, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getValidatorShares", subchainID, dynasty, addr)

	outstruct := new(struct {
		IsAValidator bool
		ShareAmount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsAValidator = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ShareAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetValidatorShares is a free data retrieval call binding the contract method 0x3f216374.
//
// Solidity: function getValidatorShares(uint256 subchainID, uint256 dynasty, address addr) view returns(bool isAValidator, uint256 shareAmount)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetValidatorShares(subchainID *big.Int, dynasty *big.Int, addr common.Address) (struct {
	IsAValidator bool
	ShareAmount  *big.Int
}, error) {
	return _ValidatorStakeManager.Contract.GetValidatorShares(&_ValidatorStakeManager.CallOpts, subchainID, dynasty, addr)
}

// GetValidatorShares is a free data retrieval call binding the contract method 0x3f216374.
//
// Solidity: function getValidatorShares(uint256 subchainID, uint256 dynasty, address addr) view returns(bool isAValidator, uint256 shareAmount)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetValidatorShares(subchainID *big.Int, dynasty *big.Int, addr common.Address) (struct {
	IsAValidator bool
	ShareAmount  *big.Int
}, error) {
	return _ValidatorStakeManager.Contract.GetValidatorShares(&_ValidatorStakeManager.CallOpts, subchainID, dynasty, addr)
}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) GetWithdrawalQueue(opts *bind.CallOpts, subchainID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "getWithdrawalQueue", subchainID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) GetWithdrawalQueue(subchainID *big.Int) (common.Address, error) {
	return _ValidatorStakeManager.Contract.GetWithdrawalQueue(&_ValidatorStakeManager.CallOpts, subchainID)
}

// GetWithdrawalQueue is a free data retrieval call binding the contract method 0x6a59c3d4.
//
// Solidity: function getWithdrawalQueue(uint256 subchainID) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) GetWithdrawalQueue(subchainID *big.Int) (common.Address, error) {
	return _ValidatorStakeManager.Contract.GetWithdrawalQueue(&_ValidatorStakeManager.CallOpts, subchainID)
}

// NumBlocksPerDynasty is a free data retrieval call binding the contract method 0x67016090.
//
// Solidity: function numBlocksPerDynasty() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) NumBlocksPerDynasty(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "numBlocksPerDynasty")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumBlocksPerDynasty is a free data retrieval call binding the contract method 0x67016090.
//
// Solidity: function numBlocksPerDynasty() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) NumBlocksPerDynasty() (*big.Int, error) {
	return _ValidatorStakeManager.Contract.NumBlocksPerDynasty(&_ValidatorStakeManager.CallOpts)
}

// NumBlocksPerDynasty is a free data retrieval call binding the contract method 0x67016090.
//
// Solidity: function numBlocksPerDynasty() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) NumBlocksPerDynasty() (*big.Int, error) {
	return _ValidatorStakeManager.Contract.NumBlocksPerDynasty(&_ValidatorStakeManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) Owner() (common.Address, error) {
	return _ValidatorStakeManager.Contract.Owner(&_ValidatorStakeManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) Owner() (common.Address, error) {
	return _ValidatorStakeManager.Contract.Owner(&_ValidatorStakeManager.CallOpts)
}

// ShareOf is a free data retrieval call binding the contract method 0x54842747.
//
// Solidity: function shareOf(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) ShareOf(opts *bind.CallOpts, subchainID *big.Int, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "shareOf", subchainID, staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ShareOf is a free data retrieval call binding the contract method 0x54842747.
//
// Solidity: function shareOf(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) ShareOf(subchainID *big.Int, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.ShareOf(&_ValidatorStakeManager.CallOpts, subchainID, staker)
}

// ShareOf is a free data retrieval call binding the contract method 0x54842747.
//
// Solidity: function shareOf(uint256 subchainID, address staker) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) ShareOf(subchainID *big.Int, staker common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.ShareOf(&_ValidatorStakeManager.CallOpts, subchainID, staker)
}

// SnapshotHeights is a free data retrieval call binding the contract method 0xc4ff9085.
//
// Solidity: function snapshotHeights(uint256 , uint256 ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) SnapshotHeights(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "snapshotHeights", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SnapshotHeights is a free data retrieval call binding the contract method 0xc4ff9085.
//
// Solidity: function snapshotHeights(uint256 , uint256 ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) SnapshotHeights(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.SnapshotHeights(&_ValidatorStakeManager.CallOpts, arg0, arg1)
}

// SnapshotHeights is a free data retrieval call binding the contract method 0xc4ff9085.
//
// Solidity: function snapshotHeights(uint256 , uint256 ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) SnapshotHeights(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.SnapshotHeights(&_ValidatorStakeManager.CallOpts, arg0, arg1)
}

// TotalShareOf is a free data retrieval call binding the contract method 0x746348ac.
//
// Solidity: function totalShareOf(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) TotalShareOf(opts *bind.CallOpts, subchainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "totalShareOf", subchainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalShareOf is a free data retrieval call binding the contract method 0x746348ac.
//
// Solidity: function totalShareOf(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) TotalShareOf(subchainID *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.TotalShareOf(&_ValidatorStakeManager.CallOpts, subchainID)
}

// TotalShareOf is a free data retrieval call binding the contract method 0x746348ac.
//
// Solidity: function totalShareOf(uint256 subchainID) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) TotalShareOf(subchainID *big.Int) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.TotalShareOf(&_ValidatorStakeManager.CallOpts, subchainID)
}

// ValidatorShares is a free data retrieval call binding the contract method 0x6b529ac4.
//
// Solidity: function validatorShares(uint256 , address , address ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) ValidatorShares(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "validatorShares", arg0, arg1, arg2)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValidatorShares is a free data retrieval call binding the contract method 0x6b529ac4.
//
// Solidity: function validatorShares(uint256 , address , address ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) ValidatorShares(arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.ValidatorShares(&_ValidatorStakeManager.CallOpts, arg0, arg1, arg2)
}

// ValidatorShares is a free data retrieval call binding the contract method 0x6b529ac4.
//
// Solidity: function validatorShares(uint256 , address , address ) view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) ValidatorShares(arg0 *big.Int, arg1 common.Address, arg2 common.Address) (*big.Int, error) {
	return _ValidatorStakeManager.Contract.ValidatorShares(&_ValidatorStakeManager.CallOpts, arg0, arg1, arg2)
}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) WithdrawalPendingPeriodInBlocks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "withdrawalPendingPeriodInBlocks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) WithdrawalPendingPeriodInBlocks() (*big.Int, error) {
	return _ValidatorStakeManager.Contract.WithdrawalPendingPeriodInBlocks(&_ValidatorStakeManager.CallOpts)
}

// WithdrawalPendingPeriodInBlocks is a free data retrieval call binding the contract method 0x336c7308.
//
// Solidity: function withdrawalPendingPeriodInBlocks() view returns(uint256)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) WithdrawalPendingPeriodInBlocks() (*big.Int, error) {
	return _ValidatorStakeManager.Contract.WithdrawalPendingPeriodInBlocks(&_ValidatorStakeManager.CallOpts)
}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCaller) WithdrawalQueues(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ValidatorStakeManager.contract.Call(opts, &out, "withdrawalQueues", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) WithdrawalQueues(arg0 *big.Int) (common.Address, error) {
	return _ValidatorStakeManager.Contract.WithdrawalQueues(&_ValidatorStakeManager.CallOpts, arg0)
}

// WithdrawalQueues is a free data retrieval call binding the contract method 0x7743b6d3.
//
// Solidity: function withdrawalQueues(uint256 ) view returns(address)
func (_ValidatorStakeManager *ValidatorStakeManagerCallerSession) WithdrawalQueues(arg0 *big.Int) (common.Address, error) {
	return _ValidatorStakeManager.Contract.WithdrawalQueues(&_ValidatorStakeManager.CallOpts, arg0)
}

// ClaimStake is a paid mutator transaction binding the contract method 0xc0cc5e89.
//
// Solidity: function claimStake(uint256 subchainID, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactor) ClaimStake(opts *bind.TransactOpts, subchainID *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.contract.Transact(opts, "claimStake", subchainID, staker)
}

// ClaimStake is a paid mutator transaction binding the contract method 0xc0cc5e89.
//
// Solidity: function claimStake(uint256 subchainID, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerSession) ClaimStake(subchainID *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.ClaimStake(&_ValidatorStakeManager.TransactOpts, subchainID, staker)
}

// ClaimStake is a paid mutator transaction binding the contract method 0xc0cc5e89.
//
// Solidity: function claimStake(uint256 subchainID, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorSession) ClaimStake(subchainID *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.ClaimStake(&_ValidatorStakeManager.TransactOpts, subchainID, staker)
}

// DepositStake is a paid mutator transaction binding the contract method 0x1ce9f8ae.
//
// Solidity: function depositStake(uint256 subchainID, address validator, uint256 govTokenAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactor) DepositStake(opts *bind.TransactOpts, subchainID *big.Int, validator common.Address, govTokenAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.contract.Transact(opts, "depositStake", subchainID, validator, govTokenAmount, staker)
}

// DepositStake is a paid mutator transaction binding the contract method 0x1ce9f8ae.
//
// Solidity: function depositStake(uint256 subchainID, address validator, uint256 govTokenAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerSession) DepositStake(subchainID *big.Int, validator common.Address, govTokenAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.DepositStake(&_ValidatorStakeManager.TransactOpts, subchainID, validator, govTokenAmount, staker)
}

// DepositStake is a paid mutator transaction binding the contract method 0x1ce9f8ae.
//
// Solidity: function depositStake(uint256 subchainID, address validator, uint256 govTokenAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorSession) DepositStake(subchainID *big.Int, validator common.Address, govTokenAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.DepositStake(&_ValidatorStakeManager.TransactOpts, subchainID, validator, govTokenAmount, staker)
}

// HasImplementedStakerReward is a paid mutator transaction binding the contract method 0xe9ed30e0.
//
// Solidity: function hasImplementedStakerReward(address token) returns(bool)
func (_ValidatorStakeManager *ValidatorStakeManagerTransactor) HasImplementedStakerReward(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.contract.Transact(opts, "hasImplementedStakerReward", token)
}

// HasImplementedStakerReward is a paid mutator transaction binding the contract method 0xe9ed30e0.
//
// Solidity: function hasImplementedStakerReward(address token) returns(bool)
func (_ValidatorStakeManager *ValidatorStakeManagerSession) HasImplementedStakerReward(token common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.HasImplementedStakerReward(&_ValidatorStakeManager.TransactOpts, token)
}

// HasImplementedStakerReward is a paid mutator transaction binding the contract method 0xe9ed30e0.
//
// Solidity: function hasImplementedStakerReward(address token) returns(bool)
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorSession) HasImplementedStakerReward(token common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.HasImplementedStakerReward(&_ValidatorStakeManager.TransactOpts, token)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactor) UpdateOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.contract.Transact(opts, "updateOwner", newOwner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerSession) UpdateOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.UpdateOwner(&_ValidatorStakeManager.TransactOpts, newOwner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newOwner) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorSession) UpdateOwner(newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.UpdateOwner(&_ValidatorStakeManager.TransactOpts, newOwner)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xb9d39284.
//
// Solidity: function withdrawStake(uint256 subchainID, address validator, uint256 shareAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactor) WithdrawStake(opts *bind.TransactOpts, subchainID *big.Int, validator common.Address, shareAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.contract.Transact(opts, "withdrawStake", subchainID, validator, shareAmount, staker)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xb9d39284.
//
// Solidity: function withdrawStake(uint256 subchainID, address validator, uint256 shareAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerSession) WithdrawStake(subchainID *big.Int, validator common.Address, shareAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.WithdrawStake(&_ValidatorStakeManager.TransactOpts, subchainID, validator, shareAmount, staker)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xb9d39284.
//
// Solidity: function withdrawStake(uint256 subchainID, address validator, uint256 shareAmount, address staker) returns()
func (_ValidatorStakeManager *ValidatorStakeManagerTransactorSession) WithdrawStake(subchainID *big.Int, validator common.Address, shareAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _ValidatorStakeManager.Contract.WithdrawStake(&_ValidatorStakeManager.TransactOpts, subchainID, validator, shareAmount, staker)
}

// ValidatorStakeManagerUpdateOwnerIterator is returned from FilterUpdateOwner and is used to iterate over the raw logs and unpacked data for UpdateOwner events raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerUpdateOwnerIterator struct {
	Event *ValidatorStakeManagerUpdateOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorStakeManagerUpdateOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorStakeManagerUpdateOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorStakeManagerUpdateOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorStakeManagerUpdateOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorStakeManagerUpdateOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorStakeManagerUpdateOwner represents a UpdateOwner event raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerUpdateOwner struct {
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateOwner is a free log retrieval operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) FilterUpdateOwner(opts *bind.FilterOpts) (*ValidatorStakeManagerUpdateOwnerIterator, error) {

	logs, sub, err := _ValidatorStakeManager.contract.FilterLogs(opts, "UpdateOwner")
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerUpdateOwnerIterator{contract: _ValidatorStakeManager.contract, event: "UpdateOwner", logs: logs, sub: sub}, nil
}

// WatchUpdateOwner is a free log subscription operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) WatchUpdateOwner(opts *bind.WatchOpts, sink chan<- *ValidatorStakeManagerUpdateOwner) (event.Subscription, error) {

	logs, sub, err := _ValidatorStakeManager.contract.WatchLogs(opts, "UpdateOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorStakeManagerUpdateOwner)
				if err := _ValidatorStakeManager.contract.UnpackLog(event, "UpdateOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateOwner is a log parse operation binding the contract event 0xe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9.
//
// Solidity: event UpdateOwner(address oldOwner, address newOwner)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) ParseUpdateOwner(log types.Log) (*ValidatorStakeManagerUpdateOwner, error) {
	event := new(ValidatorStakeManagerUpdateOwner)
	if err := _ValidatorStakeManager.contract.UnpackLog(event, "UpdateOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorStakeManagerValidatorStakeDepositIterator is returned from FilterValidatorStakeDeposit and is used to iterate over the raw logs and unpacked data for ValidatorStakeDeposit events raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeDepositIterator struct {
	Event *ValidatorStakeManagerValidatorStakeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorStakeManagerValidatorStakeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorStakeManagerValidatorStakeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorStakeManagerValidatorStakeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorStakeManagerValidatorStakeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorStakeManagerValidatorStakeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorStakeManagerValidatorStakeDeposit represents a ValidatorStakeDeposit event raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeDeposit struct {
	SubchainID              *big.Int
	SubchainGovernanceToken common.Address
	Validator               common.Address
	GovTokenAmount          *big.Int
	ShareAmount             *big.Int
	Staker                  common.Address
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterValidatorStakeDeposit is a free log retrieval operation binding the contract event 0xb4b56601301e6d487e3bc6a7911c4e20df2bced1a62f677faee5c20896b48641.
//
// Solidity: event ValidatorStakeDeposit(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) FilterValidatorStakeDeposit(opts *bind.FilterOpts, subchainID []*big.Int, validator []common.Address, staker []common.Address) (*ValidatorStakeManagerValidatorStakeDepositIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.FilterLogs(opts, "ValidatorStakeDeposit", subchainIDRule, validatorRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerValidatorStakeDepositIterator{contract: _ValidatorStakeManager.contract, event: "ValidatorStakeDeposit", logs: logs, sub: sub}, nil
}

// WatchValidatorStakeDeposit is a free log subscription operation binding the contract event 0xb4b56601301e6d487e3bc6a7911c4e20df2bced1a62f677faee5c20896b48641.
//
// Solidity: event ValidatorStakeDeposit(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) WatchValidatorStakeDeposit(opts *bind.WatchOpts, sink chan<- *ValidatorStakeManagerValidatorStakeDeposit, subchainID []*big.Int, validator []common.Address, staker []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.WatchLogs(opts, "ValidatorStakeDeposit", subchainIDRule, validatorRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorStakeManagerValidatorStakeDeposit)
				if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStakeDeposit is a log parse operation binding the contract event 0xb4b56601301e6d487e3bc6a7911c4e20df2bced1a62f677faee5c20896b48641.
//
// Solidity: event ValidatorStakeDeposit(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) ParseValidatorStakeDeposit(log types.Log) (*ValidatorStakeManagerValidatorStakeDeposit, error) {
	event := new(ValidatorStakeManagerValidatorStakeDeposit)
	if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorStakeManagerValidatorStakeReturnIterator is returned from FilterValidatorStakeReturn and is used to iterate over the raw logs and unpacked data for ValidatorStakeReturn events raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeReturnIterator struct {
	Event *ValidatorStakeManagerValidatorStakeReturn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorStakeManagerValidatorStakeReturnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorStakeManagerValidatorStakeReturn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorStakeManagerValidatorStakeReturn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorStakeManagerValidatorStakeReturnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorStakeManagerValidatorStakeReturnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorStakeManagerValidatorStakeReturn represents a ValidatorStakeReturn event raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeReturn struct {
	SubchainID              *big.Int
	SubchainGovernanceToken common.Address
	GovTokenAmount          *big.Int
	Staker                  common.Address
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterValidatorStakeReturn is a free log retrieval operation binding the contract event 0xf2b7d7e64fef4a69e46e34e4d45de5951b9a9b2679adf7520d8bf6a16376692d.
//
// Solidity: event ValidatorStakeReturn(uint256 indexed subchainID, address subchainGovernanceToken, uint256 govTokenAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) FilterValidatorStakeReturn(opts *bind.FilterOpts, subchainID []*big.Int, staker []common.Address) (*ValidatorStakeManagerValidatorStakeReturnIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.FilterLogs(opts, "ValidatorStakeReturn", subchainIDRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerValidatorStakeReturnIterator{contract: _ValidatorStakeManager.contract, event: "ValidatorStakeReturn", logs: logs, sub: sub}, nil
}

// WatchValidatorStakeReturn is a free log subscription operation binding the contract event 0xf2b7d7e64fef4a69e46e34e4d45de5951b9a9b2679adf7520d8bf6a16376692d.
//
// Solidity: event ValidatorStakeReturn(uint256 indexed subchainID, address subchainGovernanceToken, uint256 govTokenAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) WatchValidatorStakeReturn(opts *bind.WatchOpts, sink chan<- *ValidatorStakeManagerValidatorStakeReturn, subchainID []*big.Int, staker []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.WatchLogs(opts, "ValidatorStakeReturn", subchainIDRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorStakeManagerValidatorStakeReturn)
				if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeReturn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStakeReturn is a log parse operation binding the contract event 0xf2b7d7e64fef4a69e46e34e4d45de5951b9a9b2679adf7520d8bf6a16376692d.
//
// Solidity: event ValidatorStakeReturn(uint256 indexed subchainID, address subchainGovernanceToken, uint256 govTokenAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) ParseValidatorStakeReturn(log types.Log) (*ValidatorStakeManagerValidatorStakeReturn, error) {
	event := new(ValidatorStakeManagerValidatorStakeReturn)
	if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeReturn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValidatorStakeManagerValidatorStakeWithdrawalIterator is returned from FilterValidatorStakeWithdrawal and is used to iterate over the raw logs and unpacked data for ValidatorStakeWithdrawal events raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeWithdrawalIterator struct {
	Event *ValidatorStakeManagerValidatorStakeWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorStakeManagerValidatorStakeWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorStakeManagerValidatorStakeWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorStakeManagerValidatorStakeWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorStakeManagerValidatorStakeWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorStakeManagerValidatorStakeWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorStakeManagerValidatorStakeWithdrawal represents a ValidatorStakeWithdrawal event raised by the ValidatorStakeManager contract.
type ValidatorStakeManagerValidatorStakeWithdrawal struct {
	SubchainID              *big.Int
	SubchainGovernanceToken common.Address
	Validator               common.Address
	GovTokenAmount          *big.Int
	ShareAmount             *big.Int
	Staker                  common.Address
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterValidatorStakeWithdrawal is a free log retrieval operation binding the contract event 0x6f9a3eaaf9b34fce3afb673b23786645846fee391ea3f9b8a2b2741bc0627fe2.
//
// Solidity: event ValidatorStakeWithdrawal(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) FilterValidatorStakeWithdrawal(opts *bind.FilterOpts, subchainID []*big.Int, validator []common.Address, staker []common.Address) (*ValidatorStakeManagerValidatorStakeWithdrawalIterator, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.FilterLogs(opts, "ValidatorStakeWithdrawal", subchainIDRule, validatorRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorStakeManagerValidatorStakeWithdrawalIterator{contract: _ValidatorStakeManager.contract, event: "ValidatorStakeWithdrawal", logs: logs, sub: sub}, nil
}

// WatchValidatorStakeWithdrawal is a free log subscription operation binding the contract event 0x6f9a3eaaf9b34fce3afb673b23786645846fee391ea3f9b8a2b2741bc0627fe2.
//
// Solidity: event ValidatorStakeWithdrawal(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) WatchValidatorStakeWithdrawal(opts *bind.WatchOpts, sink chan<- *ValidatorStakeManagerValidatorStakeWithdrawal, subchainID []*big.Int, validator []common.Address, staker []common.Address) (event.Subscription, error) {

	var subchainIDRule []interface{}
	for _, subchainIDItem := range subchainID {
		subchainIDRule = append(subchainIDRule, subchainIDItem)
	}

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _ValidatorStakeManager.contract.WatchLogs(opts, "ValidatorStakeWithdrawal", subchainIDRule, validatorRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorStakeManagerValidatorStakeWithdrawal)
				if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorStakeWithdrawal is a log parse operation binding the contract event 0x6f9a3eaaf9b34fce3afb673b23786645846fee391ea3f9b8a2b2741bc0627fe2.
//
// Solidity: event ValidatorStakeWithdrawal(uint256 indexed subchainID, address subchainGovernanceToken, address indexed validator, uint256 govTokenAmount, uint256 shareAmount, address indexed staker)
func (_ValidatorStakeManager *ValidatorStakeManagerFilterer) ParseValidatorStakeWithdrawal(log types.Log) (*ValidatorStakeManagerValidatorStakeWithdrawal, error) {
	event := new(ValidatorStakeManagerValidatorStakeWithdrawal)
	if err := _ValidatorStakeManager.contract.UnpackLog(event, "ValidatorStakeWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
