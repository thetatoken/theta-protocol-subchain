// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package accessors

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/thetatoken/thetasubchain/eth"
	"github.com/thetatoken/thetasubchain/eth/abi"
	"github.com/thetatoken/thetasubchain/eth/abi/bind"
	"github.com/thetatoken/theta/common"
	"github.com/thetatoken/thetasubchain/eth/core/types"
	"github.com/thetatoken/thetasubchain/eth/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TNT20TokenBankMetaData contains all meta data concerning the TNT20TokenBank contract.
var TNT20TokenBankMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mainchainID_\",\"type\":\"uint256\"},{\"internalType\":\"contractChainRegistrar\",\"name\":\"chainRegistrar_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voucherContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToMintTNT20Vouchers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToSendTFuel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedToUnlockTNT20Tokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainTokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenUnlockNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceChainVoucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voucherContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voucherMintNonce\",\"type\":\"uint256\"}],\"name\":\"TNT20VoucherMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDenoms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVouchers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"denomToVoucherLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherAddress\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subchainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voucherContractAddr\",\"type\":\"address\"}],\"name\":\"getDenom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedTokenLockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getMaxProcessedVoucherBurnNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getTokenLockEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"}],\"name\":\"getVoucher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventNonce\",\"type\":\"uint256\"}],\"name\":\"getVoucherBurnEventHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainchainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenLockVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUnlockNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voucherAddressToDenomLookup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherBurnNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"voucherBurnVotingRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumlatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherMintNonceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceChainTNT20Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"targetChainVoucherReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainTokenLockNonce\",\"type\":\"uint256\"}],\"name\":\"mintVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceChainVoucherContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"burnVouchers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"denom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"targetChainTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainVoucherBurnNonce\",\"type\":\"uint256\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200561c3803806200561c833981016040819052620000349162000064565b6001600081905591909155600280546001600160a01b0319166001600160a01b03909216919091179055620000a3565b600080604083850312156200007857600080fd5b825160208401519092506001600160a01b03811681146200009857600080fd5b809150509250929050565b61556980620000b36000396000f3fe608060405260043610620001675760003560e01c80639d3a0f0c11620000c5578063ccf187c71162000078578063ccf187c71462000508578063dd17eb6d1462000539578063ebda99621462000575578063f6a3d24e146200059a578063f95627ac14620005da578063feaff052146200060b57600080fd5b80639d3a0f0c146200042a578063a0df5cc5146200044f578063a2cc69811462000466578063aa861c15146200048b578063bff4c41a14620004c0578063ca20756914620004d757600080fd5b806360569b5e116200011e57806360569b5e14620002ff5780636ac739b91462000334578063740cb7f81462000370578063766f8fb014620003a15780637ff75b4614620003d25780638883931e14620003f957600080fd5b8063073b9502146200016c5780631527b14d14620001975780631eb787371462000208578063261a323e146200026157806327ca4df11462000297578063588b140814620002cb575b600080fd5b3480156200017957600080fd5b506200018460015481565b6040519081526020015b60405180910390f35b348015620001a457600080fd5b50620001e8620001b6366004620038a0565b8051602081830181018051600d825292820191909301209152546001600160a01b03811690600160a01b900460ff1682565b604080516001600160a01b0390931683529015156020830152016200018e565b3480156200021557600080fd5b506200024b6200022736600462003ad9565b600b6020908152600092835260408084209091529082529020805460029091015482565b604080519283526020830191909152016200018e565b3480156200026e57600080fd5b506200028662000280366004620038a0565b6200064e565b60405190151581526020016200018e565b348015620002a457600080fd5b50620002bc620002b636600462003a29565b62000692565b6040516200018e919062003d7d565b348015620002d857600080fd5b50620002f0620002ea36600462003a29565b620006bd565b6040516200018e919062003e8b565b3480156200030c57600080fd5b50620003246200031e36600462003723565b62000772565b6040516200018e92919062003ff2565b3480156200034157600080fd5b50620001846200035336600462003ad9565b600091825260086020908152604080842092845291905290205490565b3480156200037d57600080fd5b50620001846200038f36600462003a29565b60066020526000908152604090205481565b348015620003ae57600080fd5b5062000184620003c036600462003a29565b6000908152600a602052604090205490565b348015620003df57600080fd5b50620003f7620003f136600462003afc565b62000821565b005b3480156200040657600080fd5b50620001846200041836600462003a29565b60036020526000908152604090205481565b3480156200043757600080fd5b50620003f76200044936600462003957565b62000a9f565b620003f76200046036600462003763565b62000dc7565b3480156200047357600080fd5b50620002bc62000485366004620038a0565b62001175565b3480156200049857600080fd5b50620004b0620004aa36600462003ad9565b620011eb565b6040516200018e92919062003e10565b620003f7620004d136600462003a5d565b620014a5565b348015620004e457600080fd5b5062000184620004f636600462003a29565b60056020526000908152604090205481565b3480156200051557600080fd5b50620001846200052736600462003a29565b60046020526000908152604090205481565b3480156200054657600080fd5b50620001846200055836600462003ad9565b600091825260076020908152604080842092845291905290205490565b3480156200058257600080fd5b50620002f06200059436600462003723565b62001a14565b348015620005a757600080fd5b5062000286620005b936600462003723565b6001600160a01b03166000908152600e602052604090206001015460ff1690565b348015620005e757600080fd5b5062000184620005f936600462003a29565b60009081526009602052604090205490565b3480156200061857600080fd5b506200024b6200062a36600462003ad9565b600c6020908152600092835260408084209091529082529020805460029091015482565b6000806200065c8362001b14565b9050600d8160405162000670919062003bc4565b9081526040519081900360200190205460ff600160a01b909104169392505050565b600f8181548110620006a357600080fd5b6000918252602090912001546001600160a01b0316905081565b60108181548110620006ce57600080fd5b906000526020600020016000915090508054620006eb9062004333565b80601f0160208091040260200160405190810160405280929190818152602001828054620007199062004333565b80156200076a5780601f106200073e576101008083540402835291602001916200076a565b820191906000526020600020905b8154815290600101906020018083116200074c57829003601f168201915b505050505081565b600e602052600090815260409020805481906200078f9062004333565b80601f0160208091040260200160405190810160405280929190818152602001828054620007bd9062004333565b80156200080e5780601f10620007e2576101008083540402835291602001916200080e565b820191906000526020600020905b815481529060010190602001808311620007f057829003601f168201915b5050506001909301549192505060ff1682565b60026000541415620008505760405162461bcd60e51b81526004016200084790620040e9565b60405180910390fd5b60026000556001600160a01b0384166200087e5760405162461bcd60e51b8152600401620008479062004018565b60006200088b8662001b14565b90506000806200089b8362001b27565b9150915080620009045760405162461bcd60e51b815260206004820152602d60248201527f4661696c656420746f206578747261637420636f6e747261637420616464726560448201526c73732066726f6d2064656e6f6d60981b606482015260840162000847565b60008984888a8989604051602001620009239695949392919062003d2c565b60405160208183030381529060405280519060200120905060006200094c8b8884893362001ba8565b9050801562000a8d5760405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb9062000985908c908c9060040162003df7565b602060405180830381600087803b158015620009a057600080fd5b505af1925050508015620009d3575060408051601f3d908101601f19168201909252620009d09181019062003882565b60015b62000a2c57886001600160a01b0316846001600160a01b03167f15168ce06e4519380f06314886008bf813f836bcace4bedb4cf1123089bfb1f48a60405162000a1e91815260200190565b60405180910390a362000a2e565b505b62000a398b62001bc7565b60008b815260046020526040908190205490517f189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb9062000a839088908d908d908c90879062003fb0565b60405180910390a1505b50506001600055505050505050505050565b6002600054141562000ac55760405162461bcd60e51b81526004016200084790620040e9565b60026000556001600160a01b03841662000af35760405162461bcd60e51b8152600401620008479062004018565b600062000b008962001b14565b905060008062000b108362001bf0565b915091508062000b6f5760405162461bcd60e51b8152602060048201526024808201527f4661696c656420746f206578747261637420636861696e49442066726f6d2064604482015263656e6f6d60e01b606482015260840162000847565b600082848c8c8c8c8c8c8c60405160200162000b949998979695949392919062003c9b565b604051602081830303815290604052805190602001209050600062000bbd848884893362001c81565b9050801562000db35760405163130d191f60e11b8152309063261a323e9062000beb90889060040162003e8b565b60206040518083038186803b15801562000c0457600080fd5b505afa15801562000c19573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c3f919062003882565b62000c5d5762000c5d8562000c57878f8f8f62001c96565b62001d38565b60405163a2cc698160e01b8152600090309063a2cc69819062000c8590899060040162003e8b565b60206040518083038186803b15801562000c9e57600080fd5b505afa15801562000cb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cd9919062003743565b90506001600160a01b03811662000d445760405162461bcd60e51b815260206004820152602860248201527f74686520766f756368657220666f72207468652064656e6f6d20646f6573206e6044820152671bdd08195e1a5cdd60c21b606482015260840162000847565b62000d51818b8b62001f62565b62000d5c856200201a565b600085815260066020526040908190205490517f5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf089062000da89089908e9086908f908e90889062003ee2565b60405180910390a150505b505060016000555050505050505050505050565b6002600054141562000ded5760405162461bcd60e51b81526004016200084790620040e9565b60026000556001600160a01b03821662000e1b5760405162461bcd60e51b8152600401620008479062004018565b6040516375ed4cb160e11b8152600090309063ebda99629062000e4390879060040162003d7d565b60006040518083038186803b15801562000e5c57600080fd5b505afa15801562000e71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000e9b9190810190620038d8565b905080516000141562000f095760405162461bcd60e51b815260206004820152602f60248201527f6661696c656420746f206c6f6f6b75702064656e6f6d20666f7220746865207660448201526e1bdd58da195c8818dbdb9d1c9858dd608a1b606482015260840162000847565b60405163130d191f60e11b8152309063261a323e9062000f2e90849060040162003e8b565b60206040518083038186803b15801562000f4757600080fd5b505afa15801562000f5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f82919062003882565b62000fd05760405162461bcd60e51b815260206004820152601f60248201527f566f756368657220636f6e747261637420646f6573206e6f7420657869737400604482015260640162000847565b3362000fde8582856200203b565b60008062000fec8462001bf0565b9150915080620010525760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f206578747261637420746172676574436861696e49442060448201526966726f6d2064656e6f6d60b01b606482015260840162000847565b6200105d82620020a7565b600082815260056020526040908190205490517f8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d90620010a790879087908b908b90879062003ea0565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620010fe57600080fd5b505afa15801562001113573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001139919062003a43565b3410156200115b5760405162461bcd60e51b815260040162000847906200404f565b6200116683620020f2565b50506001600055505050505050565b600080620011838362001b14565b90506000600d8260405162001199919062003bc4565b908152604080516020928190038301812081830190925290546001600160a01b0381168252600160a01b900460ff16158015928201929092529150620011e157519392505050565b5060009392505050565b6060806000600154461490506000600260009054906101000a90046001600160a01b03166001600160a01b031663a7464b126040518163ffffffff1660e01b815260040160206040518083038186803b1580156200124857600080fd5b505afa1580156200125d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001283919062003a43565b600254604051632f2c13b560e01b81526004810189905291925060009182916001600160a01b031690632f2c13b590602401604080518083038186803b158015620012cd57600080fd5b505afa158015620012e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001308919062003aaa565b91509150600081801562001327575062001323888562002584565b8310155b80156200134b57506200134884620013418a600162002599565b9062002584565b83105b9050848015620013585750805b15620014095760006200136d89600162002599565b6002546040516343f27e4560e01b8152600481018d9052602481018390529192506001600160a01b0316906343f27e459060440160006040518083038186803b158015620013ba57600080fd5b505afa158015620013cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013f99190810190620037a9565b975097505050505050506200149e565b6002546040516343f27e4560e01b8152600481018b9052602481018a90526001600160a01b03909116906343f27e459060440160006040518083038186803b1580156200145557600080fd5b505afa1580156200146a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620014949190810190620037a9565b9650965050505050505b9250929050565b60026000541415620014cb5760405162461bcd60e51b81526004016200084790620040e9565b6002600055620014dd838584620025a7565b6200152b5760405162461bcd60e51b815260206004820181905260248201527f6c6f636b20746f6b656e732073616e69747920636865636b73206661696c6564604482015260640162000847565b6040516370a0823160e01b815283906000906001600160a01b038316906370a08231906200155e90309060040162003d7d565b60206040518083038186803b1580156200157757600080fd5b505afa1580156200158c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015b2919062003a43565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038316906323b872dd90606401602060405180830381600087803b1580156200160457600080fd5b505af115801562001619573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200163f919062003882565b506040516370a0823160e01b81526000906001600160a01b038416906370a08231906200167190309060040162003d7d565b60206040518083038186803b1580156200168a57600080fd5b505afa1580156200169f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016c5919062003a43565b905081620016d4828662002796565b146200173d5760405162461bcd60e51b815260206004820152603160248201527f4661696c656420746f207472616e7366657220544e54323020746f6b656e7320604482015270746f2074686520746f6b656e2062616e6b60781b606482015260840162000847565b505060006200177d4660405180604001604052806002815260200161032360f41b81525062001777886001600160a01b03166014620027a4565b6200295d565b90506200178a86620029a1565b6000600360008881526020019081526020016000205490507fe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb8233898888886001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200180257600080fd5b505afa15801562001817573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018419190810190620038d8565b896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200187b57600080fd5b505afa15801562001890573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620018ba9190810190620038d8565b8a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620018f457600080fd5b505afa15801562001909573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200192f919062003b76565b89604051620019479998979695949392919062003f2c565b60405180910390a1600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200199e57600080fd5b505afa158015620019b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019d9919062003a43565b341015620019fb5760405162461bcd60e51b815260040162000847906200404f565b62001a0687620020f2565b505060016000555050505050565b6001600160a01b0381166000908152600e6020526040808220815180830190925280546060939291908290829062001a4c9062004333565b80601f016020809104026020016040519081016040528092919081815260200182805462001a7a9062004333565b801562001acb5780601f1062001a9f5761010080835404028352916020019162001acb565b820191906000526020600020905b81548152906001019060200180831162001aad57829003601f168201915b50505091835250506001919091015460ff1615156020918201528101519091501562001af8575192915050565b5050604080516020810190915260008152919050565b50919050565b606062001b2182620029ec565b92915050565b60008060008062001b3f85602f60f81b600262002a72565b915091508062001b56575060009485945092505050565b60008062001b738762001b6b866001620041d1565b895162002b0e565b915091508062001b8c5750600096879650945050505050565b600062001b998362002c30565b98600198509650505050505050565b600062001bbd8686868686600a600c62002e4b565b9695505050505050565b600081815260046020526040812080546001929062001be8908490620041d1565b909155505050565b60008060008062001c0885602f60f81b600162002a72565b915091508062001c1f575060009485945092505050565b60008062001c308760008662002b0e565b915091508062001c495750600096879650945050505050565b60008062001c5784620032fe565b915091508062001c7257506000988998509650505050505050565b50976001975095505050505050565b600062001bbd86868686866009600b62002e4b565b60008030905060008560405160200162001cb1919062003be2565b604051602081830303815290604052905060008560405160200162001cd7919062003c70565b60405160208183030381529060405290506000838984848960405162001cfd9062003579565b62001d0d95949392919062003d91565b604051809103906000f08015801562001d2a573d6000803e3d6000fd5b509998505050505050505050565b600062001d458362001b14565b60405163130d191f60e11b8152909150309063261a323e9062001d6d90849060040162003e8b565b60206040518083038186803b15801562001d8657600080fd5b505afa15801562001d9b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dc1919062003882565b1562001e1b5760405162461bcd60e51b815260206004820152602260248201527f616e20766f756368657220636f6e747261637420616c72656164792065786973604482015261747360f01b606482015260840162000847565b6040805180820182526001600160a01b0384168152600160208201529051600d9062001e4990849062003bc4565b90815260408051918290036020908101832084518154958301511515600160a01b026001600160a81b03199096166001600160a01b039182161795909517905582820182528483526001838201529285166000908152600e845220815180519293919262001ebb928492019062003587565b506020918201516001918201805460ff1916911515919091179055600f80548083019091557f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038616179055601080549182018155600052825162001f5c927f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6729092019184019062003587565b50505050565b6040516340c10f1960e01b815283906001600160a01b038216906340c10f199062001f94908690869060040162003df7565b600060405180830381600087803b15801562001faf57600080fd5b505af192505050801562001fc1575060015b62001f5c57826001600160a01b0316816001600160a01b03167fcf84d54eff0a16596b47802d7d0499f4cebdccaaf94bd9209bab3f6a94430a59846040516200200c91815260200190565b60405180910390a362001f5c565b600081815260066020526040812080546001929062001be8908490620041d1565b604051632770a7eb60e21b815283906001600160a01b03821690639dc29fac906200206d908690869060040162003df7565b600060405180830381600087803b1580156200208857600080fd5b505af11580156200209d573d6000803e3d6000fd5b5050505050505050565b6000818152600560205260408120805460019290620020c8908490620041d1565b90915550506000908152600860209081526040808320600583528184205484529091529020439055565b6000620020ff82620033e6565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316639bbb690a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200215257600080fd5b505afa15801562002167573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200218d919062003a43565b9050806200219a57505050565b6002546040805163dba9de6b60e01b8152815160009384936001600160a01b039091169263dba9de6b9260048083019392829003018186803b158015620021e057600080fd5b505afa158015620021f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200221b919062003aaa565b91509150806200223f5760405162461bcd60e51b81526004016200084790620040ba565b6000806200224e8685620011eb565b815191935091508062002265575050505050505050565b80825114620022c95760405162461bcd60e51b815260206004820152602960248201527f76616c696461746f7220616e6420736861726520616d6f756e7420636f756e74604482015268040dad2e6dac2e8c6d60bb1b606482015260840162000847565b6000805b828110156200231e5762002307848281518110620022ef57620022ef620043cb565b6020026020010151836200259990919063ffffffff16565b91508062002315816200436a565b915050620022cd565b50806200233057505050505050505050565b8660005b838110156200248b5760006200237c84620023758885815181106200235d576200235d620043cb565b60200260200101518d6200258490919063ffffffff16565b9062003403565b9050620023b7878381518110620023975762002397620043cb565b60200260200101516001600160a01b03166001600160a01b03163b151590565b6200247557868281518110620023d157620023d1620043cb565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505062002466578682815181106200241a576200241a620043cb565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885826040516200245d91815260200190565b60405180910390a25b62002472838262002796565b92505b508062002482816200436a565b91505062002334565b50620024b1856200249e600186620042aa565b81518110620023975762002397620043cb565b620025785784620024c4600185620042aa565b81518110620024d757620024d7620043cb565b60200260200101516001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505062002578578462002519600185620042aa565b815181106200252c576200252c620043cb565b60200260200101516001600160a01b03167f562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885826040516200256f91815260200190565b60405180910390a25b50505050505050505050565b60006200259282846200425d565b9392505050565b6000620025928284620041d1565b60006001600160a01b0384166200261f5760405162461bcd60e51b815260206004820152603560248201527f736f7572636520636861696e20746f6b656e20616464726573732063616e6e6f6044820152747420626520746865207a65726f206164647265737360581b606482015260840162000847565b46831415620026715760405162461bcd60e51b815260206004820152601d60248201527f63616e6e6f742073656e6420746f207468652073616d6520636861696e000000604482015260640162000847565b6001600160a01b0382166200269a5760405162461bcd60e51b8152600401620008479062004018565b6001544614158015620026ae575060015483145b80620027425750600154461480156200274257506002546040516343b71f0560e01b8152600481018590526001600160a01b03909116906343b71f059060240160206040518083038186803b1580156200270757600080fd5b505afa1580156200271c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002742919062003882565b6200278c5760405162461bcd60e51b81526020600482015260196024820152781b9bdd0818481d985b1a59081d185c99d95d10da185a5b9251603a1b604482015260640162000847565b5060019392505050565b6000620025928284620042aa565b60606000620027b58360026200425d565b620027c2906002620041d1565b6001600160401b03811115620027dc57620027dc620043e1565b6040519080825280601f01601f19166020018201604052801562002807576020820181803683370190505b509050600360fc1b81600081518110620028255762002825620043cb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620028575762002857620043cb565b60200101906001600160f81b031916908160001a90535060006200287d8460026200425d565b6200288a906001620041d1565b90505b60018111156200290c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620028c257620028c2620043cb565b1a60f81b828281518110620028db57620028db620043cb565b60200101906001600160f81b031916908160001a90535060049490941c93620029048162004319565b90506200288d565b508315620025925760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000847565b6060620029996200296e8562003411565b8484604051602001620029849392919062003c10565b60405160208183030381529060405262001b14565b949350505050565b6000818152600360205260408120805460019290620029c2908490620041d1565b90915550506000908152600760209081526040808320600383528184205484529091529020439055565b60608160005b815181101562002a6b5762002a2a82828151811062002a155762002a15620043cb565b01602001516001600160f81b03191662003526565b82828151811062002a3f5762002a3f620043cb565b60200101906001600160f81b031916908160001a9053508062002a62816200436a565b915050620029f2565b5092915050565b82516000908190859082805b8281101562002afa57876001600160f81b03191684828151811062002aa75762002aa7620043cb565b01602001516001600160f81b031916141562002ae55762002aca600183620041d1565b91508682141562002ae55794506001935062002b0692505050565b8062002af1816200436a565b91505062002a7e565b50600080945094505050505b935093915050565b82516060906000908484101562002b3a5750506040805160208101909152600080825290915062002b06565b8084111562002b5e5750506040805160208101909152600080825290915062002b06565b85600062002b6d868862002796565b6001600160401b0381111562002b875762002b87620043e1565b6040519080825280601f01601f19166020018201604052801562002bb2576020820181803683370190505b509050865b8681101562001c725782818151811062002bd55762002bd5620043cb565b01602001516001600160f81b0319168262002bf1838b62002796565b8151811062002c045762002c04620043cb565b60200101906001600160f81b031916908160001a9053508062002c27816200436a565b91505062002bb7565b60008181808060025b602a81101562002e405762002c51610100856200422b565b935084818151811062002c685762002c68620043cb565b016020015160f81c92508462002c80826001620041d1565b8151811062002c935762002c93620043cb565b016020015160f81c915060616001600160a01b0384161080159062002cc257506066836001600160a01b031611155b1562002cdd5762002cd56057846200427f565b925062002d50565b6041836001600160a01b03161015801562002d0257506046836001600160a01b031611155b1562002d155762002cd56037846200427f565b6030836001600160a01b03161015801562002d3a57506039836001600160a01b031611155b1562002d505762002d4d6030846200427f565b92505b6061826001600160a01b03161015801562002d7557506066826001600160a01b031611155b1562002d905762002d886057836200427f565b915062002e03565b6041826001600160a01b03161015801562002db557506046826001600160a01b031611155b1562002dc85762002d886037836200427f565b6030826001600160a01b03161015801562002ded57506039826001600160a01b031611155b1562002e035762002e006030836200427f565b91505b8162002e118460106200422b565b62002e1d9190620041a3565b62002e299085620041a3565b935062002e38600282620041d1565b905062002c39565b509195945050505050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b031663dba9de6b6040518163ffffffff1660e01b8152600401604080518083038186803b15801562002e9e57600080fd5b505afa15801562002eb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002ed9919062003aaa565b915091508062002efd5760405162461bcd60e51b81526004016200084790620040ba565b600282108062002f19575062002f1582600262002796565b8910155b62002f595760405162461bcd60e51b815260206004820152600f60248201526e111e5b985cdd1e481d1bdbc81bdb19608a1b604482015260640162000847565b505060015488148062002fe757506002546040516343b71f0560e01b8152600481018a90526001600160a01b03909116906343b71f059060240160206040518083038186803b15801562002fac57600080fd5b505afa15801562002fc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002fe7919062003882565b620030275760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9251608a1b604482015260640162000847565b60008881526020849052604090205462003043906001620041d1565b85146200305357506000620032f3565b600088815260208381526040808320898452909152812060015460609081908c908114156200307f5750465b6200308b818d620011eb565b9350915060005b82518110156200320857896001600160a01b0316838281518110620030bb57620030bb620043cb565b60200260200101516001600160a01b031614620030d857620031f3565b6001955060005b60018601548110156200318257856001018181548110620031045762003104620043cb565b6000918252602090912001546001600160a01b038c8116911614156200316d5760405162461bcd60e51b815260206004820152601c60248201527f546869732076616c696461746f7220616c726561647920766f74656400000000604482015260640162000847565b8062003179816200436a565b915050620030df565b508c85556001808601805491820181556000908152602090200180546001600160a01b0319166001600160a01b038c161790558351620031ed90859083908110620031d157620031d1620043cb565b602002602001015186600201546200259990919063ffffffff16565b60028601555b80620031ff816200436a565b91505062003092565b505050826200324c5760405162461bcd60e51b815260206004820152600f60248201526e2737ba1030903b30b634b230ba37b960891b604482015260640162000847565b6000805b82518110156200328a5762003273838281518110620022ef57620022ef620043cb565b91508062003281816200436a565b91505062003250565b506200329881600262002584565b6002840154620032aa90600362002584565b10620032ea5760008c815260208890526040902054620032cc906001620041d1565b60008d8152602089905260409020555060019350620032f392505050565b60009450505050505b979650505050505050565b80516000908190839082805b82811015620033d95760308482815181106200332a576200332a620043cb565b016020015160f81c108015906200335e57506039848281518110620033535762003353620043cb565b016020015160f81c11155b15620033b5576200337182600a62002584565b9150620033ad60308583815181106200338e576200338e620043cb565b0160200151620033a2919060f81c620042c4565b839060ff1662002599565b9150620033c4565b50600096879650945050505050565b80620033d0816200436a565b9150506200330a565b5095600195509350505050565b600080600154831415620033fc57504662001b21565b5090919050565b600062002592828462004214565b606081620034365750506040805180820190915260018152600360fc1b602082015290565b8160005b81156200346657806200344d816200436a565b91506200345e9050600a8362004214565b91506200343a565b6000816001600160401b03811115620034835762003483620043e1565b6040519080825280601f01601f191660200182016040528015620034ae576020820181803683370190505b5090505b84156200299957620034c6600183620042aa565b9150620034d5600a8662004388565b620034e2906030620041d1565b60f81b818381518110620034fa57620034fa620043cb565b60200101906001600160f81b031916908160001a9053506200351e600a8662004214565b9450620034b2565b6000604160f81b6001600160f81b0319831610801590620035555750602d60f91b6001600160f81b0319831611155b1562003575576200356c60f883901c6020620041ec565b60f81b92915050565b5090565b611113806200442183390190565b828054620035959062004333565b90600052602060002090601f016020900481019282620035b9576000855562003604565b82601f10620035d457805160ff191683800117855562003604565b8280016001018555821562003604579182015b8281111562003604578251825591602001919060010190620035e7565b50620035759291505b808211156200357557600081556001016200360d565b80356200363081620043f7565b919050565b600082601f8301126200364757600080fd5b81516020620036606200365a8362004153565b62004120565b80838252828201915082860187848660051b89010111156200368157600080fd5b60005b85811015620036a25781518452928401929084019060010162003684565b5090979650505050505050565b805180151581146200363057600080fd5b600082601f830112620036d257600080fd5b8135620036e36200365a8262004179565b818152846020838601011115620036f957600080fd5b816020850160208301376000918101602001919091529392505050565b8035620036308162004410565b6000602082840312156200373657600080fd5b81356200259281620043f7565b6000602082840312156200375657600080fd5b81516200259281620043f7565b6000806000606084860312156200377957600080fd5b83356200378681620043f7565b925060208401356200379881620043f7565b929592945050506040919091013590565b60008060408385031215620037bd57600080fd5b82516001600160401b0380821115620037d557600080fd5b818501915085601f830112620037ea57600080fd5b81516020620037fd6200365a8362004153565b8083825282820191508286018a848660051b89010111156200381e57600080fd5b600096505b848710156200384e5780516200383981620043f7565b83526001969096019591830191830162003823565b50918801519196509093505050808211156200386957600080fd5b50620038788582860162003635565b9150509250929050565b6000602082840312156200389557600080fd5b6200259282620036af565b600060208284031215620038b357600080fd5b81356001600160401b03811115620038ca57600080fd5b6200299984828501620036c0565b600060208284031215620038eb57600080fd5b81516001600160401b038111156200390257600080fd5b8201601f810184136200391457600080fd5b8051620039256200365a8262004179565b8181528560208385010111156200393b57600080fd5b6200394e826020830160208601620042ea565b95945050505050565b600080600080600080600080610100898b0312156200397557600080fd5b88356001600160401b03808211156200398d57600080fd5b6200399b8c838d01620036c0565b995060208b0135915080821115620039b257600080fd5b620039c08c838d01620036c0565b985060408b0135915080821115620039d757600080fd5b50620039e68b828c01620036c0565b965050620039f760608a0162003716565b945062003a0760808a0162003623565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60006020828403121562003a3c57600080fd5b5035919050565b60006020828403121562003a5657600080fd5b5051919050565b6000806000806080858703121562003a7457600080fd5b84359350602085013562003a8881620043f7565b9250604085013562003a9a81620043f7565b9396929550929360600135925050565b6000806040838503121562003abe57600080fd5b8251915062003ad060208401620036af565b90509250929050565b6000806040838503121562003aed57600080fd5b50508035926020909101359150565b60008060008060008060c0878903121562003b1657600080fd5b8635955060208701356001600160401b0381111562003b3457600080fd5b62003b4289828a01620036c0565b955050604087013562003b5581620043f7565b959894975094956060810135955060808101359460a0909101359350915050565b60006020828403121562003b8957600080fd5b8151620025928162004410565b6000815180845262003bb0816020860160208601620042ea565b601f01601f19169290920160200192915050565b6000825162003bd8818460208701620042ea565b9190910192915050565b6000825162003bf6818460208701620042ea565b67102b37bab1b432b960c11b920191825250600801919050565b6000845162003c24818460208901620042ea565b8083019050602f60f81b808252855162003c46816001850160208a01620042ea565b6001920191820152835162003c63816002840160208801620042ea565b0160020195945050505050565b603b60f91b81526000825162003c8e816001850160208701620042ea565b9190910160010192915050565b898152600060208a5162003cb581838601848f01620042ea565b8a519084019062003ccc81848401858f01620042ea565b8a5191019062003ce281848401858e01620042ea565b60f89990991b6001600160f81b031916980101968752505060609390931b6001600160601b0319166001850152601584019190915260358301526055820152607501949350505050565b8681526000865162003d46816020850160208b01620042ea565b602092019182019590955260609390931b6001600160601b0319166040840152605483019190915260748201526094019392505050565b6001600160a01b0391909116815260200190565b6001600160a01b038616815260a06020820181905260009062003db79083018762003b96565b828103604084015262003dcb818762003b96565b9050828103606084015262003de1818662003b96565b91505060ff831660808301529695505050505050565b6001600160a01b03929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b8281101562003e545781516001600160a01b03168452928401929084019060010162003e2d565b5050508381038285015284518082528583019183019060005b81811015620036a25783518352928401929184019160010162003e6d565b60208152600062002592602083018462003b96565b60a08152600062003eb560a083018862003b96565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b60c08152600062003ef760c083018962003b96565b6001600160a01b0397881660208401529590961660408201526060810193909352608083019190915260a09091015292915050565b600061012080835262003f428184018d62003b96565b6001600160a01b038c81166020860152604085018c90528a1660608501526080840189905283810360a0850152905062003f7d818862003b96565b905082810360c084015262003f93818762003b96565b60ff9590951660e084015250506101000152979650505050505050565b60a08152600062003fc560a083018862003b96565b6001600160a01b039690961660208301525060408101939093526060830191909152608090910152919050565b60408152600062004007604083018562003b96565b905082151560208301529392505050565b6020808252601b908201527f63616e6e6f742073656e6420746f207a65726f20616464726573730000000000604082015260600190565b60208082526045908201527f6e6f7420656e6f75676820544675656c20286d73672e76616c75652920746f2060408201527f636f766572207468652063726f73732d636861696e207472616e73616374696f6060820152646e2066656560d81b608082015260a00190565b6020808252601590820152746661696c656420746f206765742064796e6173747960581b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156200414b576200414b620043e1565b604052919050565b60006001600160401b038211156200416f576200416f620043e1565b5060051b60200190565b60006001600160401b03821115620041955762004195620043e1565b50601f01601f191660200190565b60006001600160a01b03828116848216808303821115620041c857620041c86200439f565b01949350505050565b60008219821115620041e757620041e76200439f565b500190565b600060ff821660ff84168060ff038211156200420c576200420c6200439f565b019392505050565b600082620042265762004226620043b5565b500490565b60006001600160a01b03828116848216811515828404821116156200425457620042546200439f565b02949350505050565b60008160001904831182151516156200427a576200427a6200439f565b500290565b60006001600160a01b0383811690831681811015620042a257620042a26200439f565b039392505050565b600082821015620042bf57620042bf6200439f565b500390565b600060ff821660ff841680821015620042e157620042e16200439f565b90039392505050565b60005b8381101562004307578181015183820152602001620042ed565b8381111562001f5c5750506000910152565b6000816200432b576200432b6200439f565b506000190190565b600181811c908216806200434857607f821691505b6020821081141562001b0e57634e487b7160e01b600052602260045260246000fd5b60006000198214156200438157620043816200439f565b5060010190565b6000826200439a576200439a620043b5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200440d57600080fd5b50565b60ff811681146200440d57600080fdfe60806040523480156200001157600080fd5b50604051620011133803806200111383398101604081905262000034916200021b565b84838381600390805190602001906200004f929190620000be565b50805162000065906004906020840190620000be565b5050600580546001600160a01b0319166001600160a01b0393909316929092179091555083516200009e906006906020870190620000be565b506007805460ff191660ff92909216919091179055506200033c92505050565b828054620000cc90620002e9565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b600082601f8301126200017657600080fd5b81516001600160401b038082111562000193576200019362000326565b604051601f8301601f19908116603f01168101908282118183101715620001be57620001be62000326565b81604052838152602092508683858801011115620001db57600080fd5b600091505b83821015620001ff5785820183015181830184015290820190620001e0565b83821115620002115760008385830101525b9695505050505050565b600080600080600060a086880312156200023457600080fd5b85516001600160a01b03811681146200024c57600080fd5b60208701519095506001600160401b03808211156200026a57600080fd5b6200027889838a0162000164565b955060408801519150808211156200028f57600080fd5b6200029d89838a0162000164565b94506060880151915080821115620002b457600080fd5b50620002c38882890162000164565b925050608086015160ff81168114620002db57600080fd5b809150509295509295909350565b600181811c90821680620002fe57607f821691505b602082108114156200032057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dc7806200034c6000396000f3fe608060405234801561001057600080fd5b50600436106100e05760003560e01c8063880cdc3111610087578063880cdc31146101b15780638da5cb5b146101c457806395d89b41146101ef5780639dc29fac146101f7578063a457c2d71461020a578063a9059cbb1461021d578063c370b04214610230578063dd62ed3e1461023857600080fd5b806306fdde03146100e5578063095ea7b31461010357806318160ddd1461012657806323b872dd14610138578063313ce5671461014b578063395093511461016057806340c10f191461017357806370a0823114610188575b600080fd5b6100ed61024b565b6040516100fa9190610c65565b60405180910390f35b610116610111366004610c3b565b6102dd565b60405190151581526020016100fa565b6002545b6040519081526020016100fa565b610116610146366004610bff565b6102f5565b60075460405160ff90911681526020016100fa565b61011661016e366004610c3b565b610319565b610186610181366004610c3b565b61033b565b005b61012a610196366004610baa565b6001600160a01b031660009081526020819052604090205490565b6101866101bf366004610baa565b61037c565b6005546101d7906001600160a01b031681565b6040516001600160a01b0390911681526020016100fa565b6100ed61040f565b610186610205366004610c3b565b61041e565b610116610218366004610c3b565b61056f565b61011661022b366004610c3b565b6105ea565b6100ed6105f8565b61012a610246366004610bcc565b610607565b60606003805461025a90610d20565b80601f016020809104026020016040519081016040528092919081815260200182805461028690610d20565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b5050505050905090565b6000336102eb818585610632565b5060019392505050565b600033610303858285610757565b61030e8585856107d1565b506001949350505050565b6000336102eb81858561032c8383610607565b6103369190610cf1565b610632565b6005546001600160a01b0316331461036e5760405162461bcd60e51b815260040161036590610cba565b60405180910390fd5b610378828261098d565b5050565b6005546001600160a01b031633146103a65760405162461bcd60e51b815260040161036590610cba565b600554604080516001600160a01b03928316815291831660208301527fe2c7d1c4da37855e682bde14f17826d185497973b73fba7554daa6da467058d9910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b60606004805461025a90610d20565b6005546001600160a01b031633146104485760405162461bcd60e51b815260040161036590610cba565b6001600160a01b038216600090815260208190526040902054818110156104cc5760405162461bcd60e51b815260206004820152603260248201527f566f7563686572206f776e657220646f6573206e6f74206861766520656e6f7560448201527133b4103130b630b731b2903a3790313ab93760711b6064820152608401610365565b6005546001600160a01b031660006104e48583610607565b9050838110156105535760405162461bcd60e51b815260206004820152603460248201527f566f7563686572206f776e657220646964206e6f7420617070726f76656420656044820152733737bab3b41030b6b7bab73a103a3790313ab93760611b6064820152608401610365565b61055e858386610757565b6105688585610a5a565b5050505050565b6000338161057d8286610607565b9050838110156105dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610365565b61030e8286868403610632565b6000336102eb8185856107d1565b60606006805461025a90610d20565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610365565b6001600160a01b0382166106f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610365565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107638484610607565b905060001981146107cb57818110156107be5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610365565b6107cb8484848403610632565b50505050565b6001600160a01b0383166108355760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610365565b6001600160a01b0382166108975760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610365565b6001600160a01b0383166000908152602081905260409020548181101561090f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610365565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610946908490610cf1565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610d728339815191528460405161098091815260200190565b60405180910390a36107cb565b6001600160a01b0382166109e35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610365565b80600260008282546109f59190610cf1565b90915550506001600160a01b03821660009081526020819052604081208054839290610a22908490610cf1565b90915550506040518181526001600160a01b03831690600090600080516020610d728339815191529060200160405180910390a35050565b6001600160a01b038216610aba5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610365565b6001600160a01b03821660009081526020819052604090205481811015610b2e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610365565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b5d908490610d09565b90915550506040518281526000906001600160a01b03851690600080516020610d728339815191529060200161074a565b80356001600160a01b0381168114610ba557600080fd5b919050565b600060208284031215610bbc57600080fd5b610bc582610b8e565b9392505050565b60008060408385031215610bdf57600080fd5b610be883610b8e565b9150610bf660208401610b8e565b90509250929050565b600080600060608486031215610c1457600080fd5b610c1d84610b8e565b9250610c2b60208501610b8e565b9150604084013590509250925092565b60008060408385031215610c4e57600080fd5b610c5783610b8e565b946020939093013593505050565b600060208083528351808285015260005b81811015610c9257858101830151858201604001528201610c76565b81811115610ca4576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252601c908201527f6f6e6c79206f776e65722063616e206d616b65207468652063616c6c00000000604082015260600190565b60008219821115610d0457610d04610d5b565b500190565b600082821015610d1b57610d1b610d5b565b500390565b600181811c90821680610d3457607f821691505b60208210811415610d5557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220ea695816e135f2b87524276e001cc27b70b5bbf13a0a0841d819a7aa527b2cbe64736f6c63430008070033a26469706673582212207aee4dba0184345743acc8ef2eaf7014d93b343076e6645fda6c82a96d426c6b64736f6c63430008070033",
}

// TNT20TokenBankABI is the input ABI used to generate the binding from.
// Deprecated: Use TNT20TokenBankMetaData.ABI instead.
var TNT20TokenBankABI = TNT20TokenBankMetaData.ABI

// TNT20TokenBankBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TNT20TokenBankMetaData.Bin instead.
var TNT20TokenBankBin = TNT20TokenBankMetaData.Bin

// DeployTNT20TokenBank deploys a new Ethereum contract, binding an instance of TNT20TokenBank to it.
func DeployTNT20TokenBank(auth *bind.TransactOpts, backend bind.ContractBackend, mainchainID_ *big.Int, chainRegistrar_ common.Address) (common.Address, *types.Transaction, *TNT20TokenBank, error) {
	parsed, err := TNT20TokenBankMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TNT20TokenBankBin), backend, mainchainID_, chainRegistrar_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// TNT20TokenBank is an auto generated Go binding around an Ethereum contract.
type TNT20TokenBank struct {
	TNT20TokenBankCaller     // Read-only binding to the contract
	TNT20TokenBankTransactor // Write-only binding to the contract
	TNT20TokenBankFilterer   // Log filterer for contract events
}

// TNT20TokenBankCaller is an auto generated read-only Go binding around an Ethereum contract.
type TNT20TokenBankCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TNT20TokenBankFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TNT20TokenBankSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TNT20TokenBankSession struct {
	Contract     *TNT20TokenBank   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TNT20TokenBankCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TNT20TokenBankCallerSession struct {
	Contract *TNT20TokenBankCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// TNT20TokenBankTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TNT20TokenBankTransactorSession struct {
	Contract     *TNT20TokenBankTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TNT20TokenBankRaw is an auto generated low-level Go binding around an Ethereum contract.
type TNT20TokenBankRaw struct {
	Contract *TNT20TokenBank // Generic contract binding to access the raw methods on
}

// TNT20TokenBankCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TNT20TokenBankCallerRaw struct {
	Contract *TNT20TokenBankCaller // Generic read-only contract binding to access the raw methods on
}

// TNT20TokenBankTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TNT20TokenBankTransactorRaw struct {
	Contract *TNT20TokenBankTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTNT20TokenBank creates a new instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBank(address common.Address, backend bind.ContractBackend) (*TNT20TokenBank, error) {
	contract, err := bindTNT20TokenBank(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBank{TNT20TokenBankCaller: TNT20TokenBankCaller{contract: contract}, TNT20TokenBankTransactor: TNT20TokenBankTransactor{contract: contract}, TNT20TokenBankFilterer: TNT20TokenBankFilterer{contract: contract}}, nil
}

// NewTNT20TokenBankCaller creates a new read-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankCaller(address common.Address, caller bind.ContractCaller) (*TNT20TokenBankCaller, error) {
	contract, err := bindTNT20TokenBank(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankCaller{contract: contract}, nil
}

// NewTNT20TokenBankTransactor creates a new write-only instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankTransactor(address common.Address, transactor bind.ContractTransactor) (*TNT20TokenBankTransactor, error) {
	contract, err := bindTNT20TokenBank(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTransactor{contract: contract}, nil
}

// NewTNT20TokenBankFilterer creates a new log filterer instance of TNT20TokenBank, bound to a specific deployed contract.
func NewTNT20TokenBankFilterer(address common.Address, filterer bind.ContractFilterer) (*TNT20TokenBankFilterer, error) {
	contract, err := bindTNT20TokenBank(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFilterer{contract: contract}, nil
}

// bindTNT20TokenBank binds a generic wrapper to an already deployed contract.
func bindTNT20TokenBank(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TNT20TokenBankABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.TNT20TokenBankCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.TNT20TokenBankTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TNT20TokenBank *TNT20TokenBankCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TNT20TokenBank.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TNT20TokenBank *TNT20TokenBankTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.contract.Transact(opts, method, params...)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) AllDenoms(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "allDenoms", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.AllDenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// AllDenoms is a free data retrieval call binding the contract method 0x588b1408.
//
// Solidity: function allDenoms(uint256 ) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) AllDenoms(arg0 *big.Int) (string, error) {
	return _TNT20TokenBank.Contract.AllDenoms(&_TNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) AllVouchers(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "allVouchers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.AllVouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// AllVouchers is a free data retrieval call binding the contract method 0x27ca4df1.
//
// Solidity: function allVouchers(uint256 ) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) AllVouchers(arg0 *big.Int) (common.Address, error) {
	return _TNT20TokenBank.Contract.AllVouchers(&_TNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) DenomToVoucherLookup(opts *bind.CallOpts, arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "denomToVoucherLookup", arg0)

	outstruct := new(struct {
		ContractAddress common.Address
		Exists          bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.DenomToVoucherLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// DenomToVoucherLookup is a free data retrieval call binding the contract method 0x1527b14d.
//
// Solidity: function denomToVoucherLookup(string ) view returns(address contractAddress, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) DenomToVoucherLookup(arg0 string) (struct {
	ContractAddress common.Address
	Exists          bool
}, error) {
	return _TNT20TokenBank.Contract.DenomToVoucherLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists(opts *bind.CallOpts, denom string) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists", denom)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists is a free data retrieval call binding the contract method 0x261a323e.
//
// Solidity: function exists(string denom) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists(denom string) (bool, error) {
	return _TNT20TokenBank.Contract.Exists(&_TNT20TokenBank.CallOpts, denom)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCaller) Exists0(opts *bind.CallOpts, voucherAddress common.Address) (bool, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "exists0", voucherAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucherAddress)
}

// Exists0 is a free data retrieval call binding the contract method 0xf6a3d24e.
//
// Solidity: function exists(address voucherAddress) view returns(bool)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) Exists0(voucherAddress common.Address) (bool, error) {
	return _TNT20TokenBank.Contract.Exists0(&_TNT20TokenBank.CallOpts, voucherAddress)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetAdjustedValidatorSet(opts *bind.CallOpts, subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getAdjustedValidatorSet", subchainID, dynasty)

	outstruct := new(struct {
		Validators   []common.Address
		ShareAmounts []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Validators = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.ShareAmounts = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT20TokenBank.Contract.GetAdjustedValidatorSet(&_TNT20TokenBank.CallOpts, subchainID, dynasty)
}

// GetAdjustedValidatorSet is a free data retrieval call binding the contract method 0xaa861c15.
//
// Solidity: function getAdjustedValidatorSet(uint256 subchainID, uint256 dynasty) view returns(address[] validators, uint256[] shareAmounts)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetAdjustedValidatorSet(subchainID *big.Int, dynasty *big.Int) (struct {
	Validators   []common.Address
	ShareAmounts []*big.Int
}, error) {
	return _TNT20TokenBank.Contract.GetAdjustedValidatorSet(&_TNT20TokenBank.CallOpts, subchainID, dynasty)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetDenom(opts *bind.CallOpts, voucherContractAddr common.Address) (string, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getDenom", voucherContractAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.GetDenom(&_TNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetDenom is a free data retrieval call binding the contract method 0xebda9962.
//
// Solidity: function getDenom(address voucherContractAddr) view returns(string)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetDenom(voucherContractAddr common.Address) (string, error) {
	return _TNT20TokenBank.Contract.GetDenom(&_TNT20TokenBank.CallOpts, voucherContractAddr)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetMaxProcessedTokenLockNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedTokenLockNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedTokenLockNonce is a free data retrieval call binding the contract method 0xf95627ac.
//
// Solidity: function getMaxProcessedTokenLockNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetMaxProcessedTokenLockNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedTokenLockNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetMaxProcessedVoucherBurnNonce(opts *bind.CallOpts, chainID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getMaxProcessedVoucherBurnNonce", chainID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetMaxProcessedVoucherBurnNonce is a free data retrieval call binding the contract method 0x766f8fb0.
//
// Solidity: function getMaxProcessedVoucherBurnNonce(uint256 chainID) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetMaxProcessedVoucherBurnNonce(chainID *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetMaxProcessedVoucherBurnNonce(&_TNT20TokenBank.CallOpts, chainID)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetTokenLockEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getTokenLockEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetTokenLockEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetTokenLockEventHeight is a free data retrieval call binding the contract method 0xdd17eb6d.
//
// Solidity: function getTokenLockEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetTokenLockEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetTokenLockEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetVoucher(opts *bind.CallOpts, denom string) (common.Address, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getVoucher", denom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.GetVoucher(&_TNT20TokenBank.CallOpts, denom)
}

// GetVoucher is a free data retrieval call binding the contract method 0xa2cc6981.
//
// Solidity: function getVoucher(string denom) view returns(address)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetVoucher(denom string) (common.Address, error) {
	return _TNT20TokenBank.Contract.GetVoucher(&_TNT20TokenBank.CallOpts, denom)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) GetVoucherBurnEventHeight(opts *bind.CallOpts, chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "getVoucherBurnEventHeight", chainID, eventNonce)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// GetVoucherBurnEventHeight is a free data retrieval call binding the contract method 0x6ac739b9.
//
// Solidity: function getVoucherBurnEventHeight(uint256 chainID, uint256 eventNonce) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) GetVoucherBurnEventHeight(chainID *big.Int, eventNonce *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.GetVoucherBurnEventHeight(&_TNT20TokenBank.CallOpts, chainID, eventNonce)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) MainchainID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "mainchainID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) MainchainID() (*big.Int, error) {
	return _TNT20TokenBank.Contract.MainchainID(&_TNT20TokenBank.CallOpts)
}

// MainchainID is a free data retrieval call binding the contract method 0x073b9502.
//
// Solidity: function mainchainID() view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) MainchainID() (*big.Int, error) {
	return _TNT20TokenBank.Contract.MainchainID(&_TNT20TokenBank.CallOpts)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenLockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenLockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenLockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenLockNonceMap is a free data retrieval call binding the contract method 0x8883931e.
//
// Solidity: function tokenLockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenLockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenLockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenLockVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenLockVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.TokenLockVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenLockVotingRecords is a free data retrieval call binding the contract method 0x1eb78737.
//
// Solidity: function tokenLockVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenLockVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.TokenLockVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) TokenUnlockNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "tokenUnlockNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenUnlockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// TokenUnlockNonceMap is a free data retrieval call binding the contract method 0xccf187c7.
//
// Solidity: function tokenUnlockNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) TokenUnlockNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.TokenUnlockNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherAddressToDenomLookup(opts *bind.CallOpts, arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherAddressToDenomLookup", arg0)

	outstruct := new(struct {
		Denom  string
		Exists bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Denom = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Exists = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherAddressToDenomLookup is a free data retrieval call binding the contract method 0x60569b5e.
//
// Solidity: function voucherAddressToDenomLookup(address ) view returns(string denom, bool exists)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherAddressToDenomLookup(arg0 common.Address) (struct {
	Denom  string
	Exists bool
}, error) {
	return _TNT20TokenBank.Contract.VoucherAddressToDenomLookup(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherBurnNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherBurnNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherBurnNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnNonceMap is a free data retrieval call binding the contract method 0xca207569.
//
// Solidity: function voucherBurnNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherBurnNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherBurnNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherBurnVotingRecords(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherBurnVotingRecords", arg0, arg1)

	outstruct := new(struct {
		Dynasty          *big.Int
		AccumlatedShares *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Dynasty = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.AccumlatedShares = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherBurnVotingRecords is a free data retrieval call binding the contract method 0xfeaff052.
//
// Solidity: function voucherBurnVotingRecords(uint256 , bytes32 ) view returns(uint256 dynasty, uint256 accumlatedShares)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherBurnVotingRecords(arg0 *big.Int, arg1 [32]byte) (struct {
	Dynasty          *big.Int
	AccumlatedShares *big.Int
}, error) {
	return _TNT20TokenBank.Contract.VoucherBurnVotingRecords(&_TNT20TokenBank.CallOpts, arg0, arg1)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCaller) VoucherMintNonceMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TNT20TokenBank.contract.Call(opts, &out, "voucherMintNonceMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherMintNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// VoucherMintNonceMap is a free data retrieval call binding the contract method 0x740cb7f8.
//
// Solidity: function voucherMintNonceMap(uint256 ) view returns(uint256)
func (_TNT20TokenBank *TNT20TokenBankCallerSession) VoucherMintNonceMap(arg0 *big.Int) (*big.Int, error) {
	return _TNT20TokenBank.Contract.VoucherMintNonceMap(&_TNT20TokenBank.CallOpts, arg0)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) BurnVouchers(opts *bind.TransactOpts, sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "burnVouchers", sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.BurnVouchers(&_TNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// BurnVouchers is a paid mutator transaction binding the contract method 0xa0df5cc5.
//
// Solidity: function burnVouchers(address sourceChainVoucherContractAddr, address targetChainTokenReceiver, uint256 burnedAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) BurnVouchers(sourceChainVoucherContractAddr common.Address, targetChainTokenReceiver common.Address, burnedAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.BurnVouchers(&_TNT20TokenBank.TransactOpts, sourceChainVoucherContractAddr, targetChainTokenReceiver, burnedAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) LockTokens(opts *bind.TransactOpts, targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "lockTokens", targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.LockTokens(&_TNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// LockTokens is a paid mutator transaction binding the contract method 0xbff4c41a.
//
// Solidity: function lockTokens(uint256 targetChainID, address sourceChainTNT20Contract, address targetChainVoucherReceiver, uint256 lockAmount) payable returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) LockTokens(targetChainID *big.Int, sourceChainTNT20Contract common.Address, targetChainVoucherReceiver common.Address, lockAmount *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.LockTokens(&_TNT20TokenBank.TransactOpts, targetChainID, sourceChainTNT20Contract, targetChainVoucherReceiver, lockAmount)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) MintVouchers(opts *bind.TransactOpts, denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "mintVouchers", denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.MintVouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// MintVouchers is a paid mutator transaction binding the contract method 0x9d3a0f0c.
//
// Solidity: function mintVouchers(string denom, string name, string symbol, uint8 decimals, address targetChainVoucherReceiver, uint256 mintedAmount, uint256 dynasty, uint256 sourceChainTokenLockNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) MintVouchers(denom string, name string, symbol string, decimals uint8, targetChainVoucherReceiver common.Address, mintedAmount *big.Int, dynasty *big.Int, sourceChainTokenLockNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.MintVouchers(&_TNT20TokenBank.TransactOpts, denom, name, symbol, decimals, targetChainVoucherReceiver, mintedAmount, dynasty, sourceChainTokenLockNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactor) UnlockTokens(opts *bind.TransactOpts, sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.contract.Transact(opts, "unlockTokens", sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.UnlockTokens(&_TNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// UnlockTokens is a paid mutator transaction binding the contract method 0x7ff75b46.
//
// Solidity: function unlockTokens(uint256 sourceChainID, string denom, address targetChainTokenReceiver, uint256 unlockAmount, uint256 dynasty, uint256 sourceChainVoucherBurnNonce) returns()
func (_TNT20TokenBank *TNT20TokenBankTransactorSession) UnlockTokens(sourceChainID *big.Int, denom string, targetChainTokenReceiver common.Address, unlockAmount *big.Int, dynasty *big.Int, sourceChainVoucherBurnNonce *big.Int) (*types.Transaction, error) {
	return _TNT20TokenBank.Contract.UnlockTokens(&_TNT20TokenBank.TransactOpts, sourceChainID, denom, targetChainTokenReceiver, unlockAmount, dynasty, sourceChainVoucherBurnNonce)
}

// TNT20TokenBankFailedToMintTNT20VouchersIterator is returned from FilterFailedToMintTNT20Vouchers and is used to iterate over the raw logs and unpacked data for FailedToMintTNT20Vouchers events raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToMintTNT20VouchersIterator struct {
	Event *TNT20TokenBankFailedToMintTNT20Vouchers // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankFailedToMintTNT20VouchersIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankFailedToMintTNT20Vouchers)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankFailedToMintTNT20Vouchers)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankFailedToMintTNT20VouchersIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankFailedToMintTNT20VouchersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankFailedToMintTNT20Vouchers represents a FailedToMintTNT20Vouchers event raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToMintTNT20Vouchers struct {
	VoucherContractAddress common.Address
	Receiver               common.Address
	Amount                 *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterFailedToMintTNT20Vouchers is a free log retrieval operation binding the contract event 0xcf84d54eff0a16596b47802d7d0499f4cebdccaaf94bd9209bab3f6a94430a59.
//
// Solidity: event FailedToMintTNT20Vouchers(address indexed voucherContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterFailedToMintTNT20Vouchers(opts *bind.FilterOpts, voucherContractAddress []common.Address, receiver []common.Address) (*TNT20TokenBankFailedToMintTNT20VouchersIterator, error) {

	var voucherContractAddressRule []interface{}
	for _, voucherContractAddressItem := range voucherContractAddress {
		voucherContractAddressRule = append(voucherContractAddressRule, voucherContractAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "FailedToMintTNT20Vouchers", voucherContractAddressRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFailedToMintTNT20VouchersIterator{contract: _TNT20TokenBank.contract, event: "FailedToMintTNT20Vouchers", logs: logs, sub: sub}, nil
}

// WatchFailedToMintTNT20Vouchers is a free log subscription operation binding the contract event 0xcf84d54eff0a16596b47802d7d0499f4cebdccaaf94bd9209bab3f6a94430a59.
//
// Solidity: event FailedToMintTNT20Vouchers(address indexed voucherContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchFailedToMintTNT20Vouchers(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankFailedToMintTNT20Vouchers, voucherContractAddress []common.Address, receiver []common.Address) (event.Subscription, error) {

	var voucherContractAddressRule []interface{}
	for _, voucherContractAddressItem := range voucherContractAddress {
		voucherContractAddressRule = append(voucherContractAddressRule, voucherContractAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "FailedToMintTNT20Vouchers", voucherContractAddressRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankFailedToMintTNT20Vouchers)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToMintTNT20Vouchers", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToMintTNT20Vouchers is a log parse operation binding the contract event 0xcf84d54eff0a16596b47802d7d0499f4cebdccaaf94bd9209bab3f6a94430a59.
//
// Solidity: event FailedToMintTNT20Vouchers(address indexed voucherContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseFailedToMintTNT20Vouchers(log types.Log) (*TNT20TokenBankFailedToMintTNT20Vouchers, error) {
	event := new(TNT20TokenBankFailedToMintTNT20Vouchers)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToMintTNT20Vouchers", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankFailedToSendTFuelIterator is returned from FilterFailedToSendTFuel and is used to iterate over the raw logs and unpacked data for FailedToSendTFuel events raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToSendTFuelIterator struct {
	Event *TNT20TokenBankFailedToSendTFuel // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankFailedToSendTFuel)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankFailedToSendTFuel)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankFailedToSendTFuelIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankFailedToSendTFuel represents a FailedToSendTFuel event raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToSendTFuel struct {
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterFailedToSendTFuel is a free log retrieval operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterFailedToSendTFuel(opts *bind.FilterOpts, receiver []common.Address) (*TNT20TokenBankFailedToSendTFuelIterator, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFailedToSendTFuelIterator{contract: _TNT20TokenBank.contract, event: "FailedToSendTFuel", logs: logs, sub: sub}, nil
}

// WatchFailedToSendTFuel is a free log subscription operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchFailedToSendTFuel(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankFailedToSendTFuel, receiver []common.Address) (event.Subscription, error) {

	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "FailedToSendTFuel", receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankFailedToSendTFuel)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToSendTFuel is a log parse operation binding the contract event 0x562a1007af95860758404d928a251ad8b0062ac50058db9f82dab3fe379f4885.
//
// Solidity: event FailedToSendTFuel(address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseFailedToSendTFuel(log types.Log) (*TNT20TokenBankFailedToSendTFuel, error) {
	event := new(TNT20TokenBankFailedToSendTFuel)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToSendTFuel", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankFailedToUnlockTNT20TokensIterator is returned from FilterFailedToUnlockTNT20Tokens and is used to iterate over the raw logs and unpacked data for FailedToUnlockTNT20Tokens events raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToUnlockTNT20TokensIterator struct {
	Event *TNT20TokenBankFailedToUnlockTNT20Tokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankFailedToUnlockTNT20TokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankFailedToUnlockTNT20Tokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankFailedToUnlockTNT20Tokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankFailedToUnlockTNT20TokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankFailedToUnlockTNT20TokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankFailedToUnlockTNT20Tokens represents a FailedToUnlockTNT20Tokens event raised by the TNT20TokenBank contract.
type TNT20TokenBankFailedToUnlockTNT20Tokens struct {
	TokenContractAddress common.Address
	Receiver             common.Address
	Amount               *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterFailedToUnlockTNT20Tokens is a free log retrieval operation binding the contract event 0x15168ce06e4519380f06314886008bf813f836bcace4bedb4cf1123089bfb1f4.
//
// Solidity: event FailedToUnlockTNT20Tokens(address indexed tokenContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterFailedToUnlockTNT20Tokens(opts *bind.FilterOpts, tokenContractAddress []common.Address, receiver []common.Address) (*TNT20TokenBankFailedToUnlockTNT20TokensIterator, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "FailedToUnlockTNT20Tokens", tokenContractAddressRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankFailedToUnlockTNT20TokensIterator{contract: _TNT20TokenBank.contract, event: "FailedToUnlockTNT20Tokens", logs: logs, sub: sub}, nil
}

// WatchFailedToUnlockTNT20Tokens is a free log subscription operation binding the contract event 0x15168ce06e4519380f06314886008bf813f836bcace4bedb4cf1123089bfb1f4.
//
// Solidity: event FailedToUnlockTNT20Tokens(address indexed tokenContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchFailedToUnlockTNT20Tokens(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankFailedToUnlockTNT20Tokens, tokenContractAddress []common.Address, receiver []common.Address) (event.Subscription, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var receiverRule []interface{}
	for _, receiverItem := range receiver {
		receiverRule = append(receiverRule, receiverItem)
	}

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "FailedToUnlockTNT20Tokens", tokenContractAddressRule, receiverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankFailedToUnlockTNT20Tokens)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToUnlockTNT20Tokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFailedToUnlockTNT20Tokens is a log parse operation binding the contract event 0x15168ce06e4519380f06314886008bf813f836bcace4bedb4cf1123089bfb1f4.
//
// Solidity: event FailedToUnlockTNT20Tokens(address indexed tokenContractAddress, address indexed receiver, uint256 amount)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseFailedToUnlockTNT20Tokens(log types.Log) (*TNT20TokenBankFailedToUnlockTNT20Tokens, error) {
	event := new(TNT20TokenBankFailedToUnlockTNT20Tokens)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "FailedToUnlockTNT20Tokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20TokenLockedIterator is returned from FilterTNT20TokenLocked and is used to iterate over the raw logs and unpacked data for TNT20TokenLocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenLockedIterator struct {
	Event *TNT20TokenBankTNT20TokenLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20TokenLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20TokenLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20TokenLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20TokenLocked represents a TNT20TokenLocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenLocked struct {
	Denom                      string
	SourceChainTokenSender     common.Address
	TargetChainID              *big.Int
	TargetChainVoucherReceiver common.Address
	LockedAmount               *big.Int
	Name                       string
	Symbol                     string
	Decimals                   uint8
	TokenLockNonce             *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenLocked is a free log retrieval operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20TokenLocked(opts *bind.FilterOpts) (*TNT20TokenBankTNT20TokenLockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20TokenLockedIterator{contract: _TNT20TokenBank.contract, event: "TNT20TokenLocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenLocked is a free log subscription operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20TokenLocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20TokenLocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20TokenLocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenLocked is a log parse operation binding the contract event 0xe5d8852bc02bf44f2a49b2d7722fa497ff83b689a28de1253304d2bc43d7b1cb.
//
// Solidity: event TNT20TokenLocked(string denom, address sourceChainTokenSender, uint256 targetChainID, address targetChainVoucherReceiver, uint256 lockedAmount, string name, string symbol, uint8 decimals, uint256 tokenLockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20TokenLocked(log types.Log) (*TNT20TokenBankTNT20TokenLocked, error) {
	event := new(TNT20TokenBankTNT20TokenLocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20TokenUnlockedIterator is returned from FilterTNT20TokenUnlocked and is used to iterate over the raw logs and unpacked data for TNT20TokenUnlocked events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenUnlockedIterator struct {
	Event *TNT20TokenBankTNT20TokenUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20TokenUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20TokenUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20TokenUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20TokenUnlocked represents a TNT20TokenUnlocked event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20TokenUnlocked struct {
	Denom                       string
	TargetChainTokenReceiver    common.Address
	UnlockedAmount              *big.Int
	SourceChainVoucherBurnNonce *big.Int
	TokenUnlockNonce            *big.Int
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterTNT20TokenUnlocked is a free log retrieval operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20TokenUnlocked(opts *bind.FilterOpts) (*TNT20TokenBankTNT20TokenUnlockedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20TokenUnlockedIterator{contract: _TNT20TokenBank.contract, event: "TNT20TokenUnlocked", logs: logs, sub: sub}, nil
}

// WatchTNT20TokenUnlocked is a free log subscription operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20TokenUnlocked(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20TokenUnlocked) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20TokenUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20TokenUnlocked)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20TokenUnlocked is a log parse operation binding the contract event 0x189b6301573b050cb7c350cae6d2d5c6262fda802e3b6cc69ee25eb35bdaa4eb.
//
// Solidity: event TNT20TokenUnlocked(string denom, address targetChainTokenReceiver, uint256 unlockedAmount, uint256 sourceChainVoucherBurnNonce, uint256 tokenUnlockNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20TokenUnlocked(log types.Log) (*TNT20TokenBankTNT20TokenUnlocked, error) {
	event := new(TNT20TokenBankTNT20TokenUnlocked)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20TokenUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20VoucherBurnedIterator is returned from FilterTNT20VoucherBurned and is used to iterate over the raw logs and unpacked data for TNT20VoucherBurned events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherBurnedIterator struct {
	Event *TNT20TokenBankTNT20VoucherBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20VoucherBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20VoucherBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20VoucherBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20VoucherBurned represents a TNT20VoucherBurned event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherBurned struct {
	Denom                    string
	SourceChainVoucherOwner  common.Address
	TargetChainTokenReceiver common.Address
	BurnedAmount             *big.Int
	VoucherBurnNonce         *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherBurned is a free log retrieval operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20VoucherBurned(opts *bind.FilterOpts) (*TNT20TokenBankTNT20VoucherBurnedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20VoucherBurnedIterator{contract: _TNT20TokenBank.contract, event: "TNT20VoucherBurned", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherBurned is a free log subscription operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20VoucherBurned(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20VoucherBurned) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherBurned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20VoucherBurned)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherBurned is a log parse operation binding the contract event 0x8cd7380d25c66046ede32c8a8089e2c5c5356ed48d6885bb3956f3a1bc4f030d.
//
// Solidity: event TNT20VoucherBurned(string denom, address sourceChainVoucherOwner, address targetChainTokenReceiver, uint256 burnedAmount, uint256 voucherBurnNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20VoucherBurned(log types.Log) (*TNT20TokenBankTNT20VoucherBurned, error) {
	event := new(TNT20TokenBankTNT20VoucherBurned)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TNT20TokenBankTNT20VoucherMintedIterator is returned from FilterTNT20VoucherMinted and is used to iterate over the raw logs and unpacked data for TNT20VoucherMinted events raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherMintedIterator struct {
	Event *TNT20TokenBankTNT20VoucherMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TNT20TokenBankTNT20VoucherMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TNT20TokenBankTNT20VoucherMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TNT20TokenBankTNT20VoucherMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TNT20TokenBankTNT20VoucherMinted represents a TNT20VoucherMinted event raised by the TNT20TokenBank contract.
type TNT20TokenBankTNT20VoucherMinted struct {
	Denom                      string
	TargetChainVoucherReceiver common.Address
	VoucherContract            common.Address
	MintedAmount               *big.Int
	SourceChainTokenLockNonce  *big.Int
	VoucherMintNonce           *big.Int
	Raw                        types.Log // Blockchain specific contextual infos
}

// FilterTNT20VoucherMinted is a free log retrieval operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) FilterTNT20VoucherMinted(opts *bind.FilterOpts) (*TNT20TokenBankTNT20VoucherMintedIterator, error) {

	logs, sub, err := _TNT20TokenBank.contract.FilterLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return &TNT20TokenBankTNT20VoucherMintedIterator{contract: _TNT20TokenBank.contract, event: "TNT20VoucherMinted", logs: logs, sub: sub}, nil
}

// WatchTNT20VoucherMinted is a free log subscription operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) WatchTNT20VoucherMinted(opts *bind.WatchOpts, sink chan<- *TNT20TokenBankTNT20VoucherMinted) (event.Subscription, error) {

	logs, sub, err := _TNT20TokenBank.contract.WatchLogs(opts, "TNT20VoucherMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TNT20TokenBankTNT20VoucherMinted)
				if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTNT20VoucherMinted is a log parse operation binding the contract event 0x5249cf5aa9f373a9fda5076a53abb87450615986fd25b4d701a153f8840eaf08.
//
// Solidity: event TNT20VoucherMinted(string denom, address targetChainVoucherReceiver, address voucherContract, uint256 mintedAmount, uint256 sourceChainTokenLockNonce, uint256 voucherMintNonce)
func (_TNT20TokenBank *TNT20TokenBankFilterer) ParseTNT20VoucherMinted(log types.Log) (*TNT20TokenBankTNT20VoucherMinted, error) {
	event := new(TNT20TokenBankTNT20VoucherMinted)
	if err := _TNT20TokenBank.contract.UnpackLog(event, "TNT20VoucherMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
